{"uid":"755e6f95a39e036b","name":"test_executemany_bulk_insert_qmark","fullName":"tests.unit.db.test_cursor#test_executemany_bulk_insert_qmark","historyId":"27a49fac14e932416c5d15e0ba5dace3","time":{"start":1760005534792,"stop":1760005534796,"duration":4},"description":"executemany with bulk_insert=True concatenates INSERT queries with QMARK style.","descriptionHtml":"<p>executemany with bulk_insert=True concatenates INSERT queries with QMARK style.</p>\n","status":"broken","statusMessage":"firebolt.utils.exception.DataError: Invalid query data format: 'meta'","statusTrace":"self = <firebolt.common.row_set.synchronous.in_memory.InMemoryRowSet object at 0x7f799815d400>\nstream = <generator object Response.iter_bytes at 0x7f799798f120>\n\n    def append_response_stream(self, stream: Iterator[bytes]) -> None:\n        \"\"\"\n        Create an InMemoryRowSet from a response stream.\n        \"\"\"\n        content = b\"\".join(stream).decode(\"utf-8\")\n        if len(content) == 0:\n            self.append_empty_response()\n        else:\n            try:\n                # Skip parsing floats to properly parse them later\n                query_data = json.loads(content, parse_float=str)\n    \n                if \"errors\" in query_data and len(query_data[\"errors\"]) > 0:\n                    raise FireboltStructuredError(query_data)\n    \n                columns = [\n                    Column(\n                        d[\"name\"], parse_type(d[\"type\"]), None, None, None, None, None\n                    )\n>                   for d in query_data[\"meta\"]\n                ]\nE               KeyError: 'meta'\n\n/home/runner/work/firebolt-python-sdk/firebolt-python-sdk/src/firebolt/common/row_set/synchronous/in_memory.py:56: KeyError\n\nDuring handling of the above exception, another exception occurred:\n\nhttpx_mock = <pytest_httpx._httpx_mock.HTTPXMock object at 0x7f799ab21af0>\ncursor = <firebolt.db.cursor.CursorV2 object at 0x7f7998083040>\nquery_url = URL('https://mock_engine_name.mock.firebolt.io/?output_format=JSON_Compact&database=database')\npython_query_data = [[0, 256, 70000, -32768, 922337203685477580, -922337203685477580, ...], [1, 256, 70000, -32768, 922337203685477580, -9...337203685477580, -922337203685477580, ...], [5, 256, 70000, -32768, 922337203685477580, -922337203685477580, ...], ...]\n\n    def test_executemany_bulk_insert_qmark(\n        httpx_mock: HTTPXMock,\n        cursor: Cursor,\n        query_url: str,\n        python_query_data: List[List[ColType]],\n    ):\n        \"\"\"executemany with bulk_insert=True concatenates INSERT queries with QMARK style.\"\"\"\n    \n        def bulk_insert_callback(request):\n            assert request.url.params.get(\"merge_prepared_statement_batches\") == \"true\"\n    \n            query = request.content.decode()\n            assert query.count(\"INSERT INTO\") == 3\n            assert \"; \" in query\n    \n            return Response(\n                status_code=200,\n                content=json.dumps(\n                    {\n                        \"data\": [],\n                        \"rows\": 0,\n                        \"statistics\": {},\n                    }\n                ),\n                headers={},\n            )\n    \n        base_url = str(query_url).split(\"?\")[0]\n        url_pattern = re.compile(re.escape(base_url))\n        httpx_mock.add_callback(bulk_insert_callback, url=url_pattern)\n    \n>       result = cursor.executemany(\n            \"INSERT INTO test_table VALUES (?, ?)\",\n            [(1, \"a\"), (2, \"b\"), (3, \"c\")],\n            bulk_insert=True,\n        )\n\n/home/runner/work/firebolt-python-sdk/firebolt-python-sdk/tests/unit/db/test_cursor.py:1427: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/home/runner/work/firebolt-python-sdk/firebolt-python-sdk/src/firebolt/common/cursor/decorators.py:24: in inner\n    return func(self, *args, **kwargs)\n/home/runner/work/firebolt-python-sdk/firebolt-python-sdk/src/firebolt/db/cursor.py:461: in executemany\n    return self._executemany_bulk_insert(query, parameters_seq, timeout_seconds)\n/home/runner/work/firebolt-python-sdk/firebolt-python-sdk/src/firebolt/db/cursor.py:559: in _executemany_bulk_insert\n    self._append_row_set_from_response(resp)\n/home/runner/work/firebolt-python-sdk/firebolt-python-sdk/src/firebolt/db/cursor.py:590: in _append_row_set_from_response\n    self._row_set.append_response(response)\n/home/runner/work/firebolt-python-sdk/firebolt-python-sdk/src/firebolt/common/row_set/synchronous/in_memory.py:33: in append_response\n    self.append_response_stream(response.iter_bytes())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <firebolt.common.row_set.synchronous.in_memory.InMemoryRowSet object at 0x7f799815d400>\nstream = <generator object Response.iter_bytes at 0x7f799798f120>\n\n    def append_response_stream(self, stream: Iterator[bytes]) -> None:\n        \"\"\"\n        Create an InMemoryRowSet from a response stream.\n        \"\"\"\n        content = b\"\".join(stream).decode(\"utf-8\")\n        if len(content) == 0:\n            self.append_empty_response()\n        else:\n            try:\n                # Skip parsing floats to properly parse them later\n                query_data = json.loads(content, parse_float=str)\n    \n                if \"errors\" in query_data and len(query_data[\"errors\"]) > 0:\n                    raise FireboltStructuredError(query_data)\n    \n                columns = [\n                    Column(\n                        d[\"name\"], parse_type(d[\"type\"]), None, None, None, None, None\n                    )\n                    for d in query_data[\"meta\"]\n                ]\n                # Extract rows\n                rows = query_data[\"data\"]\n                row_count = len(rows)\n                statistics = Statistics(**query_data.get(\"statistics\", {}))\n                self._row_sets.append(\n                    RowsResponse(row_count, columns, statistics, rows)\n                )\n            except (KeyError, ValueError) as err:\n>               raise DataError(f\"Invalid query data format: {str(err)}\")\nE               firebolt.utils.exception.DataError: Invalid query data format: 'meta'\n\n/home/runner/work/firebolt-python-sdk/firebolt-python-sdk/src/firebolt/common/row_set/synchronous/in_memory.py:66: DataError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"insert_assert_add_to_builtins","time":{"start":1760005467988,"stop":1760005467988,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"pytestconfig","time":{"start":1760005467988,"stop":1760005467988,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"insert_assert_session","time":{"start":1760005467989,"stop":1760005467989,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"insert_assert_maybe_fail","time":{"start":1760005534679,"stop":1760005534679,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_cache","time":{"start":1760005534679,"stop":1760005534680,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"disable_cache","time":{"start":1760005534680,"stop":1760005534680,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"global_fake_fs","time":{"start":1760005534680,"stop":1760005534682,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_endpoint","time":{"start":1760005534682,"stop":1760005534682,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"db_name","time":{"start":1760005534682,"stop":1760005534682,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"httpx_mock","time":{"start":1760005534682,"stop":1760005534682,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"monkeypatch","time":{"start":1760005534682,"stop":1760005534682,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth","time":{"start":1760005534683,"stop":1760005534704,"duration":21},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"client_id","time":{"start":1760005534683,"stop":1760005534683,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"client_secret","time":{"start":1760005534683,"stop":1760005534683,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"account_name","time":{"start":1760005534704,"stop":1760005534705,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"engine_name","time":{"start":1760005534704,"stop":1760005534704,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"access_token","time":{"start":1760005534705,"stop":1760005534705,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"check_credentials_callback","time":{"start":1760005534705,"stop":1760005534705,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_endpoint","time":{"start":1760005534705,"stop":1760005534705,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_url","time":{"start":1760005534705,"stop":1760005534705,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_system_engine_url","time":{"start":1760005534706,"stop":1760005534706,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"mock_system_engine_connection_flow","time":{"start":1760005534706,"stop":1760005534706,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"query_statistics","time":{"start":1760005534706,"stop":1760005534706,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"system_engine_url","time":{"start":1760005534706,"stop":1760005534706,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"use_database_callback","time":{"start":1760005534706,"stop":1760005534707,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_system_engine_callback","time":{"start":1760005534706,"stop":1760005534706,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"connection","time":{"start":1760005534707,"stop":1760005534790,"duration":83},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"mock_connection_flow","time":{"start":1760005534707,"stop":1760005534707,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"engine_url","time":{"start":1760005534707,"stop":1760005534707,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"system_engine_query_url","time":{"start":1760005534707,"stop":1760005534707,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"system_engine_no_db_query_url","time":{"start":1760005534707,"stop":1760005534707,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"use_engine_callback","time":{"start":1760005534707,"stop":1760005534707,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"query_url","time":{"start":1760005534790,"stop":1760005534791,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cursor","time":{"start":1760005534790,"stop":1760005534790,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"python_query_data","time":{"start":1760005534791,"stop":1760005534791,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"connection::0","time":{"start":1760005534909,"stop":1760005534909,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"httpx_mock::0","time":{"start":1760005534917,"stop":1760005534919,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"global_fake_fs::0","time":{"start":1760005534920,"stop":1760005534921,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"monkeypatch::0","time":{"start":1760005534920,"stop":1760005534920,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"insert_assert_maybe_fail::0","time":{"start":1760005534922,"stop":1760005534922,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"insert_assert_session::0","time":{"start":1760005541784,"stop":1760005541784,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.unit.db"},{"name":"suite","value":"test_cursor"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2433-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.unit.db.test_cursor"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"755e6f95a39e036b.json","parameterValues":[]}
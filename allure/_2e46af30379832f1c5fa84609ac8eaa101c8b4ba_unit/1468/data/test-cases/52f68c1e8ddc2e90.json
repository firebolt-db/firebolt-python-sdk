{"uid":"52f68c1e8ddc2e90","name":"test_cursor_set_statements","fullName":"tests.unit.V1.db.test_cursor#test_cursor_set_statements","historyId":"62f979c8ff1be907c61e1c08115e2bc2","time":{"start":1759509240871,"stop":1759509240876,"duration":5},"description":"cursor correctly parses and processes set statements.","descriptionHtml":"<p>cursor correctly parses and processes set statements.</p>\n","status":"broken","statusMessage":"firebolt.utils.exception.QueryTimeoutError: Query execution timed out.","statusTrace":"self = <firebolt.db.cursor.CursorV1 object at 0x7ff3d36c8700>\nquery = 'select 1', parameters = {'database': 'database', 'param1': '1'}\npath = '', use_set_parameters = True, timeout = None\n\n    def _api_request(\n        self,\n        query: str = \"\",\n        parameters: Optional[dict[str, Any]] = None,\n        path: str = \"\",\n        use_set_parameters: bool = True,\n        timeout: Optional[float] = None,\n    ) -> Response:\n        \"\"\"\n        Query API, return Response object.\n    \n        Args:\n            query (str): SQL query\n            parameters (Optional[Sequence[ParameterType]]): A sequence of substitution\n                parameters. Used to replace '?' placeholders inside a query with\n                actual values. Note: In order to \"output_format\" dict value, it\n                    must be an empty string. If no value not specified,\n                    JSON_OUTPUT_FORMAT will be used.\n            path (str): endpoint suffix, for example \"cancel\" or \"status\"\n            use_set_parameters: Optional[bool]: Some queries will fail if additional\n                set parameters are sent. Setting this to False will allow\n                self._set_parameters to be ignored.\n            timeout (Optional[float]): Request execution timeout in seconds\n        \"\"\"\n        parameters = parameters or {}\n        if use_set_parameters:\n            parameters = {**(self._set_parameters or {}), **parameters}\n        if self.parameters:\n            parameters = {**self.parameters, **parameters}\n        try:\n            req = self._client.build_request(\n                url=urljoin(self.engine_url.rstrip(\"/\") + \"/\", path or \"\"),\n                method=\"POST\",\n                params=parameters,\n                content=query,\n                timeout=timeout if timeout is not None else USE_CLIENT_DEFAULT,\n            )\n>           return self._client.send(req, stream=True)\n\n/home/runner/work/firebolt-python-sdk/firebolt-python-sdk/src/firebolt/db/cursor.py:161: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/httpx/_client.py:914: in send\n    response = self._send_handling_auth(\n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/httpx/_client.py:942: in _send_handling_auth\n    response = self._send_handling_redirects(\n/home/runner/work/firebolt-python-sdk/firebolt-python-sdk/src/firebolt/client/client.py:123: in _send_handling_redirects\n    return super()._send_handling_redirects(\n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/httpx/_client.py:979: in _send_handling_redirects\n    response = self._send_single_request(request)\n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/httpx/_client.py:1014: in _send_single_request\n    response = transport.handle_request(request)\n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/pytest_httpx/__init__.py:40: in mocked_handle_request\n    return mock._handle_request(transport, request)\n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/pytest_httpx/_httpx_mock.py:163: in _handle_request\n    self._request_not_matched(real_transport, request)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_httpx._httpx_mock.HTTPXMock object at 0x7ff3d35e9ca0>\nreal_transport = <firebolt.client.http_backend.KeepaliveTransport object at 0x7ff3d63a90d0>\nrequest = <AuthRequest('POST', 'https://api-dev.mock.firebolt.io/auth/v1/login')>\n\n    def _request_not_matched(\n        self,\n        real_transport: Union[httpx.AsyncHTTPTransport, httpx.HTTPTransport],\n        request: httpx.Request,\n    ) -> NoReturn:\n        self._requests_not_matched.append(request)\n>       raise httpx.TimeoutException(\n            self._explain_that_no_response_was_found(real_transport, request),\n            request=request,\n        )\nE       httpx.TimeoutException: No response can be found for POST request on https://api-dev.mock.firebolt.io/auth/v1/login amongst:\nE       - Match any request on https://mock_engine_name.mock.firebolt.io/?database=database&param1=1\nE       - Already matched any request on https://api-dev.mock.firebolt.io/auth/v1/login\nE       - Already matched any request on https://mock_engine_name.mock.firebolt.io/?database=database&a=b\nE       \nE       If you wanted to reuse an already matched response instead of registering it again, refer to https://github.com/Colin-b/pytest_httpx/blob/master/README.md#allow-to-register-a-response-for-more-than-one-request\n\n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/pytest_httpx/_httpx_mock.py:191: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nhttpx_mock = <pytest_httpx._httpx_mock.HTTPXMock object at 0x7ff3d35e9ca0>\nauth_callback = <function auth_callback.<locals>.do_mock at 0x7ff3d369b8b0>\nauth_url = 'https://api-dev.mock.firebolt.io/auth/v1/login'\nquery_callback = <function query_callback.<locals>.do_query at 0x7ff3d369b550>\nselect_one_query_callback = <function select_one_query_callback.<locals>.do_query at 0x7ff3d36c85e0>\nset_query_url = URL('https://mock_engine_name.mock.firebolt.io/?database=database')\ncursor = <firebolt.db.cursor.CursorV1 object at 0x7ff3d36c8700>\npython_query_description = [Column(name='uint8', type_code=<class 'int'>, display_size=None, internal_size=None, precision=None, scale=None, null...int64', type_code=<class 'int'>, display_size=None, internal_size=None, precision=None, scale=None, null_ok=None), ...]\npython_query_data = [[0, 256, 70000, -32768, 922337203685477580, -922337203685477580, ...], [1, 256, 70000, -32768, 922337203685477580, -9...337203685477580, -922337203685477580, ...], [5, 256, 70000, -32768, 922337203685477580, -922337203685477580, ...], ...]\n\n    def test_cursor_set_statements(\n        httpx_mock: HTTPXMock,\n        auth_callback: Callable,\n        auth_url: str,\n        query_callback: Callable,\n        select_one_query_callback: Callable,\n        set_query_url: str,\n        cursor: Cursor,\n        python_query_description: List[Column],\n        python_query_data: List[List[ColType]],\n    ):\n        \"\"\"cursor correctly parses and processes set statements.\"\"\"\n        httpx_mock.add_callback(auth_callback, url=auth_url)\n        httpx_mock.add_callback(select_one_query_callback, url=f\"{set_query_url}&a=b\")\n    \n        assert len(cursor._set_parameters) == 0\n    \n        rc = cursor.execute(\"set a = b\")\n        assert rc == -1, \"Invalid row count returned\"\n        assert cursor.description == [], \"Non-empty description for set\"\n        with raises(DataError):\n            cursor.fetchall()\n    \n        assert (\n            len(cursor._set_parameters) == 1\n            and \"a\" in cursor._set_parameters\n            and cursor._set_parameters[\"a\"] == \"b\"\n        )\n    \n        cursor.flush_parameters()\n    \n        assert len(cursor._set_parameters) == 0\n    \n        httpx_mock.add_callback(select_one_query_callback, url=f\"{set_query_url}&param1=1\")\n    \n>       rc = cursor.execute(\"set param1=1\")\n\n/home/runner/work/firebolt-python-sdk/firebolt-python-sdk/tests/unit/V1/db/test_cursor.py:480: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/home/runner/work/firebolt-python-sdk/firebolt-python-sdk/src/firebolt/common/cursor/decorators.py:24: in inner\n    return func(self, *args, **kwargs)\n/home/runner/work/firebolt-python-sdk/firebolt-python-sdk/src/firebolt/db/cursor.py:413: in execute\n    self._do_execute(query, params_list, skip_parsing, timeout=timeout_seconds)\n/home/runner/work/firebolt-python-sdk/firebolt-python-sdk/src/firebolt/db/cursor.py:251: in _do_execute\n    self._execute_single_query(\n/home/runner/work/firebolt-python-sdk/firebolt-python-sdk/src/firebolt/db/cursor.py:303: in _execute_single_query\n    self._validate_set_parameter(query, timeout_controller.remaining())\n/home/runner/work/firebolt-python-sdk/firebolt-python-sdk/src/firebolt/db/cursor.py:170: in _validate_set_parameter\n    resp = self._api_request(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <firebolt.db.cursor.CursorV1 object at 0x7ff3d36c8700>\nquery = 'select 1', parameters = {'database': 'database', 'param1': '1'}\npath = '', use_set_parameters = True, timeout = None\n\n    def _api_request(\n        self,\n        query: str = \"\",\n        parameters: Optional[dict[str, Any]] = None,\n        path: str = \"\",\n        use_set_parameters: bool = True,\n        timeout: Optional[float] = None,\n    ) -> Response:\n        \"\"\"\n        Query API, return Response object.\n    \n        Args:\n            query (str): SQL query\n            parameters (Optional[Sequence[ParameterType]]): A sequence of substitution\n                parameters. Used to replace '?' placeholders inside a query with\n                actual values. Note: In order to \"output_format\" dict value, it\n                    must be an empty string. If no value not specified,\n                    JSON_OUTPUT_FORMAT will be used.\n            path (str): endpoint suffix, for example \"cancel\" or \"status\"\n            use_set_parameters: Optional[bool]: Some queries will fail if additional\n                set parameters are sent. Setting this to False will allow\n                self._set_parameters to be ignored.\n            timeout (Optional[float]): Request execution timeout in seconds\n        \"\"\"\n        parameters = parameters or {}\n        if use_set_parameters:\n            parameters = {**(self._set_parameters or {}), **parameters}\n        if self.parameters:\n            parameters = {**self.parameters, **parameters}\n        try:\n            req = self._client.build_request(\n                url=urljoin(self.engine_url.rstrip(\"/\") + \"/\", path or \"\"),\n                method=\"POST\",\n                params=parameters,\n                content=query,\n                timeout=timeout if timeout is not None else USE_CLIENT_DEFAULT,\n            )\n            return self._client.send(req, stream=True)\n        except TimeoutException:\n>           raise QueryTimeoutError()\nE           firebolt.utils.exception.QueryTimeoutError: Query execution timed out.\n\n/home/runner/work/firebolt-python-sdk/firebolt-python-sdk/src/firebolt/db/cursor.py:163: QueryTimeoutError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"insert_assert_add_to_builtins","time":{"start":1759509230762,"stop":1759509230763,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"insert_assert_session","time":{"start":1759509230763,"stop":1759509230763,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"pytestconfig","time":{"start":1759509230763,"stop":1759509230763,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"insert_assert_maybe_fail","time":{"start":1759509240780,"stop":1759509240780,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"global_fake_fs","time":{"start":1759509240781,"stop":1759509240783,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"disable_cache","time":{"start":1759509240781,"stop":1759509240781,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_cache","time":{"start":1759509240781,"stop":1759509240781,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"httpx_mock","time":{"start":1759509240783,"stop":1759509240783,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"monkeypatch","time":{"start":1759509240783,"stop":1759509240783,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"query_data","time":{"start":1759509240784,"stop":1759509240784,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"query_description","time":{"start":1759509240784,"stop":1759509240784,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"query_statistics","time":{"start":1759509240784,"stop":1759509240784,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_url","time":{"start":1759509240784,"stop":1759509240784,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_endpoint","time":{"start":1759509240784,"stop":1759509240784,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_callback","time":{"start":1759509240784,"stop":1759509240784,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"engine_name","time":{"start":1759509240785,"stop":1759509240785,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"db_name","time":{"start":1759509240785,"stop":1759509240785,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"set_query_url","time":{"start":1759509240785,"stop":1759509240786,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"select_one_query_callback","time":{"start":1759509240785,"stop":1759509240785,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"query_callback","time":{"start":1759509240785,"stop":1759509240785,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"engine_url","time":{"start":1759509240785,"stop":1759509240785,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"password","time":{"start":1759509240786,"stop":1759509240786,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"user","time":{"start":1759509240786,"stop":1759509240786,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"username_password_auth","time":{"start":1759509240786,"stop":1759509240813,"duration":27},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"connection","time":{"start":1759509240813,"stop":1759509240869,"duration":56},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cursor","time":{"start":1759509240869,"stop":1759509240869,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"python_query_data","time":{"start":1759509240870,"stop":1759509240870,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"python_query_description","time":{"start":1759509240870,"stop":1759509240870,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_url","time":{"start":1759509246237,"stop":1759509246237,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"connection::0","time":{"start":1759509241036,"stop":1759509241036,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"httpx_mock::0","time":{"start":1759509241042,"stop":1759509241042,"duration":0},"status":"failed","statusMessage":"AssertionError: The following responses are mocked but not requested:\n  - Match any request on https://mock_engine_name.mock.firebolt.io/?database=database&param1=1\n  \n  If this is on purpose, refer to https://github.com/Colin-b/pytest_httpx/blob/master/README.md#allow-to-register-more-responses-than-what-will-be-requested\nassert not [<pytest_httpx._request_matcher._RequestMatcher object at 0x7ff3d63ae4c0>]\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/allure_commons/_allure.py\", line 231, in __call__\n    return self._fixture_function(*args, **kwargs)\n  File \"/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/_pytest/fixtures.py\", line 938, in _teardown_yield_fixture\n    next(it)\n  File \"/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/pytest_httpx/__init__.py\", line 67, in httpx_mock\n    mock._assert_options()\n  File \"/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/pytest_httpx/_httpx_mock.py\", line 319, in _assert_options\n    assert not callbacks_not_executed, (\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"monkeypatch::0","time":{"start":1759509241042,"stop":1759509241042,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"global_fake_fs::0","time":{"start":1759509241043,"stop":1759509241044,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"insert_assert_maybe_fail::0","time":{"start":1759509241045,"stop":1759509241045,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"insert_assert_session::0","time":{"start":1759509291345,"stop":1759509291345,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.unit.V1.db"},{"name":"suite","value":"test_cursor"},{"name":"host","value":"runnervm3ublj"},{"name":"thread","value":"2436-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.unit.V1.db.test_cursor"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"52f68c1e8ddc2e90.json","parameterValues":[]}
{"uid":"305f2ecd1fea68b5","name":"test_connect_db_different_accounts[True]","fullName":"tests.unit.db.test_caching#test_connect_db_different_accounts","historyId":"717c0d822246c53fe498be4858a54b70","time":{"start":1759509677482,"stop":1759509677622,"duration":140},"description":"Test caching when switching between different databases.","descriptionHtml":"<p>Test caching when switching between different databases.</p>\n","status":"broken","statusMessage":"firebolt.utils.exception.QueryTimeoutError: Query execution timed out.","statusTrace":"self = <firebolt.db.cursor.CursorV2 object at 0x7f56147e5700>\nquery = 'USE DATABASE \"database\"'\nparameters = {'output_format': 'JSON_Compact'}, path = ''\nuse_set_parameters = True, timeout = None\n\n    def _api_request(\n        self,\n        query: str = \"\",\n        parameters: Optional[dict[str, Any]] = None,\n        path: str = \"\",\n        use_set_parameters: bool = True,\n        timeout: Optional[float] = None,\n    ) -> Response:\n        \"\"\"\n        Query API, return Response object.\n    \n        Args:\n            query (str): SQL query\n            parameters (Optional[Sequence[ParameterType]]): A sequence of substitution\n                parameters. Used to replace '?' placeholders inside a query with\n                actual values. Note: In order to \"output_format\" dict value, it\n                    must be an empty string. If no value not specified,\n                    JSON_OUTPUT_FORMAT will be used.\n            path (str): endpoint suffix, for example \"cancel\" or \"status\"\n            use_set_parameters: Optional[bool]: Some queries will fail if additional\n                set parameters are sent. Setting this to False will allow\n                self._set_parameters to be ignored.\n            timeout (Optional[float]): Request execution timeout in seconds\n        \"\"\"\n        parameters = parameters or {}\n        if use_set_parameters:\n            parameters = {**(self._set_parameters or {}), **parameters}\n        if self.parameters:\n            parameters = {**self.parameters, **parameters}\n        try:\n            req = self._client.build_request(\n                url=urljoin(self.engine_url.rstrip(\"/\") + \"/\", path or \"\"),\n                method=\"POST\",\n                params=parameters,\n                content=query,\n                timeout=timeout if timeout is not None else USE_CLIENT_DEFAULT,\n            )\n>           return self._client.send(req, stream=True)\n\n/home/runner/work/firebolt-python-sdk/firebolt-python-sdk/src/firebolt/db/cursor.py:161: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/httpx/_client.py:914: in send\n    response = self._send_handling_auth(\n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/httpx/_client.py:942: in _send_handling_auth\n    response = self._send_handling_redirects(\n/home/runner/work/firebolt-python-sdk/firebolt-python-sdk/src/firebolt/client/client.py:123: in _send_handling_redirects\n    return super()._send_handling_redirects(\n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/httpx/_client.py:979: in _send_handling_redirects\n    response = self._send_single_request(request)\n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/httpx/_client.py:1014: in _send_single_request\n    response = transport.handle_request(request)\n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/pytest_httpx/__init__.py:40: in mocked_handle_request\n    return mock._handle_request(transport, request)\n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/pytest_httpx/_httpx_mock.py:163: in _handle_request\n    self._request_not_matched(real_transport, request)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_httpx._httpx_mock.HTTPXMock object at 0x7f56149f7880>\nreal_transport = <firebolt.client.http_backend.KeepaliveTransport object at 0x7f5614b8b0d0>\nrequest = <Request('POST', 'https://bravo.a.eu-west-1.aws.mock.firebolt.io/?output_format=JSON_Compact')>\n\n    def _request_not_matched(\n        self,\n        real_transport: Union[httpx.AsyncHTTPTransport, httpx.HTTPTransport],\n        request: httpx.Request,\n    ) -> NoReturn:\n        self._requests_not_matched.append(request)\n>       raise httpx.TimeoutException(\n            self._explain_that_no_response_was_found(real_transport, request),\n            request=request,\n        )\nE       httpx.TimeoutException: No response can be found for POST request on https://bravo.a.eu-west-1.aws.mock.firebolt.io/?output_format=JSON_Compact with b'USE DATABASE \"database\"' body amongst:\nE       - Already matched any request on https://id.mock.firebolt.io/oauth/token\nE       - Already matched any request on https://api-dev.mock.firebolt.io/web/v3/account/mock_account_name/engineUrl\nE       - Already matched any request on https://api-dev.mock.firebolt.io/web/v3/account/mock_account_name_second/engineUrl\nE       - Already matched any request on https://bravo.a.eu-west-1.aws.mock.firebolt.io/?output_format=JSON_Compact with b'USE DATABASE \"database\"' body\nE       - Already matched any request on https://bravo.a.eu-west-1.aws.mock.firebolt.io/?output_format=JSON_Compact&database=database with b'USE ENGINE \"mock_engine_name\"' body\nE       - Already matched any request on https://mock_engine_name.mock.firebolt.io/?output_format=JSON_Compact&database=database\nE       \nE       If you wanted to reuse an already matched response instead of registering it again, refer to https://github.com/Colin-b/pytest_httpx/blob/master/README.md#allow-to-register-a-response-for-more-than-one-request\n\n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/pytest_httpx/_httpx_mock.py:191: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\ndb_name = 'database', engine_name = 'mock_engine_name'\nauth_url = 'https://id.mock.firebolt.io/oauth/token'\nhttpx_mock = <pytest_httpx._httpx_mock.HTTPXMock object at 0x7f56149f7880>\ncheck_credentials_callback = <function check_credentials_callback.<locals>.check_credentials at 0x7f5617cbe4c0>\nget_system_engine_url = URL('https://api-dev.mock.firebolt.io/web/v3/account/mock_account_name/engineUrl')\nget_system_engine_callback = <function get_system_engine_callback.<locals>.inner at 0x7f5617cbe310>\nsystem_engine_query_url = 'https://bravo.a.eu-west-1.aws.mock.firebolt.io/?output_format=JSON_Compact&database=database'\nsystem_engine_no_db_query_url = 'https://bravo.a.eu-west-1.aws.mock.firebolt.io/?output_format=JSON_Compact'\nquery_url = URL('https://mock_engine_name.mock.firebolt.io/?output_format=JSON_Compact&database=database')\nuse_database_callback = <function use_database_callback.<locals>.inner at 0x7f5617cbe9d0>\nuse_engine_callback = <function use_engine_callback.<locals>.inner at 0x7f5617cbe700>\nquery_callback = <function query_callback.<locals>.do_query at 0x7f5614aa1af0>\napi_endpoint = 'api-dev.mock.firebolt.io'\nauth = <firebolt.client.auth.client_credentials.ClientCredentials object at 0x7f5614723f40>\naccount_name = 'mock_account_name', cache_enabled = True\n\n    @mark.parametrize(\"cache_enabled\", [True, False])\n    def test_connect_db_different_accounts(\n        db_name: str,\n        engine_name: str,\n        auth_url: str,\n        httpx_mock: HTTPXMock,\n        check_credentials_callback: Callable,\n        get_system_engine_url: URL,\n        get_system_engine_callback: Callable,\n        system_engine_query_url: str,\n        system_engine_no_db_query_url: str,\n        query_url: str,\n        use_database_callback: Callable,\n        use_engine_callback: Callable,\n        query_callback: Callable,\n        api_endpoint: str,\n        auth: Auth,\n        account_name: str,\n        cache_enabled: bool,\n    ):\n        \"\"\"Test caching when switching between different databases.\"\"\"\n        system_engine_call_counter = 0\n        use_database_call_counter = 0\n        use_engine_call_counter = 0\n    \n        def system_engine_callback_counter(request, **kwargs):\n            nonlocal system_engine_call_counter\n            system_engine_call_counter += 1\n            return get_system_engine_callback(request, **kwargs)\n    \n        def use_database_callback_counter(request, **kwargs):\n            nonlocal use_database_call_counter\n            use_database_call_counter += 1\n            return use_database_callback(request, **kwargs)\n    \n        def use_engine_callback_counter(request, **kwargs):\n            nonlocal use_engine_call_counter\n            use_engine_call_counter += 1\n            return use_engine_callback(request, **kwargs)\n    \n        get_system_engine_url_new_account = str(get_system_engine_url).replace(\n            account_name, account_name + \"_second\"\n        )\n        httpx_mock.add_callback(check_credentials_callback, url=auth_url)\n        httpx_mock.add_callback(system_engine_callback_counter, url=get_system_engine_url)\n        httpx_mock.add_callback(\n            system_engine_callback_counter, url=get_system_engine_url_new_account\n        )\n    \n        httpx_mock.add_callback(\n            use_database_callback_counter,\n            url=system_engine_no_db_query_url,\n            match_content=f'USE DATABASE \"{db_name}\"'.encode(\"utf-8\"),\n        )\n    \n        httpx_mock.add_callback(\n            use_engine_callback_counter,\n            url=system_engine_query_url,\n            match_content=f'USE ENGINE \"{engine_name}\"'.encode(\"utf-8\"),\n        )\n        httpx_mock.add_callback(query_callback, url=query_url)\n    \n        # First connection\n    \n        with connect(\n            database=db_name,\n            engine_name=engine_name,\n            auth=auth,\n            account_name=account_name,\n            api_endpoint=api_endpoint,\n            disable_cache=not cache_enabled,\n        ) as connection:\n            connection.cursor().execute(\"select*\")\n    \n        assert system_engine_call_counter == 1, \"System engine URL was not called\"\n        assert use_engine_call_counter == 1, \"Use engine URL was not called\"\n        assert use_database_call_counter == 1, \"Use database URL was not called\"\n    \n        # Second connection against different account\n>       with connect(\n            database=db_name,\n            engine_name=engine_name,\n            auth=auth,\n            account_name=account_name + \"_second\",\n            api_endpoint=api_endpoint,\n            disable_cache=not cache_enabled,\n        ) as connection:\n\n/home/runner/work/firebolt-python-sdk/firebolt-python-sdk/tests/unit/db/test_caching.py:388: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/home/runner/work/firebolt-python-sdk/firebolt-python-sdk/src/firebolt/db/connection.py:92: in connect\n    return connect_v2(\n/home/runner/work/firebolt-python-sdk/firebolt-python-sdk/src/firebolt/db/connection.py:175: in connect_v2\n    cursor.use_database(database, cache=not disable_cache)\n/home/runner/work/firebolt-python-sdk/firebolt-python-sdk/src/firebolt/db/cursor.py:353: in use_database\n    self.execute(f'USE DATABASE \"{database}\"')\n/home/runner/work/firebolt-python-sdk/firebolt-python-sdk/src/firebolt/common/cursor/decorators.py:24: in inner\n    return func(self, *args, **kwargs)\n/home/runner/work/firebolt-python-sdk/firebolt-python-sdk/src/firebolt/db/cursor.py:413: in execute\n    self._do_execute(query, params_list, skip_parsing, timeout=timeout_seconds)\n/home/runner/work/firebolt-python-sdk/firebolt-python-sdk/src/firebolt/db/cursor.py:251: in _do_execute\n    self._execute_single_query(\n/home/runner/work/firebolt-python-sdk/firebolt-python-sdk/src/firebolt/db/cursor.py:305: in _execute_single_query\n    self._handle_query_execution(\n/home/runner/work/firebolt-python-sdk/firebolt-python-sdk/src/firebolt/db/cursor.py:329: in _handle_query_execution\n    resp = self._api_request(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <firebolt.db.cursor.CursorV2 object at 0x7f56147e5700>\nquery = 'USE DATABASE \"database\"'\nparameters = {'output_format': 'JSON_Compact'}, path = ''\nuse_set_parameters = True, timeout = None\n\n    def _api_request(\n        self,\n        query: str = \"\",\n        parameters: Optional[dict[str, Any]] = None,\n        path: str = \"\",\n        use_set_parameters: bool = True,\n        timeout: Optional[float] = None,\n    ) -> Response:\n        \"\"\"\n        Query API, return Response object.\n    \n        Args:\n            query (str): SQL query\n            parameters (Optional[Sequence[ParameterType]]): A sequence of substitution\n                parameters. Used to replace '?' placeholders inside a query with\n                actual values. Note: In order to \"output_format\" dict value, it\n                    must be an empty string. If no value not specified,\n                    JSON_OUTPUT_FORMAT will be used.\n            path (str): endpoint suffix, for example \"cancel\" or \"status\"\n            use_set_parameters: Optional[bool]: Some queries will fail if additional\n                set parameters are sent. Setting this to False will allow\n                self._set_parameters to be ignored.\n            timeout (Optional[float]): Request execution timeout in seconds\n        \"\"\"\n        parameters = parameters or {}\n        if use_set_parameters:\n            parameters = {**(self._set_parameters or {}), **parameters}\n        if self.parameters:\n            parameters = {**self.parameters, **parameters}\n        try:\n            req = self._client.build_request(\n                url=urljoin(self.engine_url.rstrip(\"/\") + \"/\", path or \"\"),\n                method=\"POST\",\n                params=parameters,\n                content=query,\n                timeout=timeout if timeout is not None else USE_CLIENT_DEFAULT,\n            )\n            return self._client.send(req, stream=True)\n        except TimeoutException:\n>           raise QueryTimeoutError()\nE           firebolt.utils.exception.QueryTimeoutError: Query execution timed out.\n\n/home/runner/work/firebolt-python-sdk/firebolt-python-sdk/src/firebolt/db/cursor.py:163: QueryTimeoutError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"insert_assert_add_to_builtins","time":{"start":1759509639133,"stop":1759509639134,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"pytestconfig","time":{"start":1759509639134,"stop":1759509639134,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"insert_assert_session","time":{"start":1759509639134,"stop":1759509639134,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"insert_assert_maybe_fail","time":{"start":1759509677452,"stop":1759509677452,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_cache","time":{"start":1759509677452,"stop":1759509677452,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"disable_cache","time":{"start":1759509677453,"stop":1759509677453,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"global_fake_fs","time":{"start":1759509677453,"stop":1759509677455,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"use_cache","time":{"start":1759509677455,"stop":1759509677455,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"db_name","time":{"start":1759509677455,"stop":1759509677456,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"enable_cache","time":{"start":1759509677455,"stop":1759509677455,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_endpoint","time":{"start":1759509677456,"stop":1759509677456,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"httpx_mock","time":{"start":1759509677456,"stop":1759509677457,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"monkeypatch","time":{"start":1759509677456,"stop":1759509677456,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_url","time":{"start":1759509677456,"stop":1759509677456,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"engine_name","time":{"start":1759509677456,"stop":1759509677456,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"access_token","time":{"start":1759509677457,"stop":1759509677457,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"client_secret","time":{"start":1759509677457,"stop":1759509677457,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"account_name","time":{"start":1759509677457,"stop":1759509677458,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_endpoint","time":{"start":1759509677457,"stop":1759509677457,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"check_credentials_callback","time":{"start":1759509677457,"stop":1759509677457,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"client_id","time":{"start":1759509677457,"stop":1759509677457,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_system_engine_callback","time":{"start":1759509677458,"stop":1759509677458,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"system_engine_url","time":{"start":1759509677458,"stop":1759509677458,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"system_engine_no_db_query_url","time":{"start":1759509677458,"stop":1759509677458,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"system_engine_query_url","time":{"start":1759509677458,"stop":1759509677458,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_system_engine_url","time":{"start":1759509677458,"stop":1759509677458,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"use_database_callback","time":{"start":1759509677459,"stop":1759509677459,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"use_engine_callback","time":{"start":1759509677459,"stop":1759509677459,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"query_url","time":{"start":1759509677459,"stop":1759509677459,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"engine_url","time":{"start":1759509677459,"stop":1759509677459,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"query_statistics","time":{"start":1759509677459,"stop":1759509677459,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth","time":{"start":1759509677460,"stop":1759509677480,"duration":20},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"query_data","time":{"start":1759509677460,"stop":1759509677460,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"query_callback","time":{"start":1759509677460,"stop":1759509677460,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"query_description","time":{"start":1759509677460,"stop":1759509677460,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"httpx_mock::0","time":{"start":1759509677860,"stop":1759509677863,"duration":3},"status":"failed","statusMessage":"AssertionError: The following requests were not expected:\n  - POST request on https://bravo.a.eu-west-1.aws.mock.firebolt.io/?output_format=JSON_Compact\n  \n  If this is on purpose, refer to https://github.com/Colin-b/pytest_httpx/blob/master/README.md#allow-to-not-register-responses-for-every-request\nassert not [<Request('POST', 'https://bravo.a.eu-west-1.aws.mock.firebolt.io/?output_format=JSON_Compact')>]\n +  where [<Request('POST', 'https://bravo.a.eu-west-1.aws.mock.firebolt.io/?output_format=JSON_Compact')>] = <pytest_httpx._httpx_mock.HTTPXMock object at 0x7f56149f7880>._requests_not_matched\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/allure_commons/_allure.py\", line 231, in __call__\n    return self._fixture_function(*args, **kwargs)\n  File \"/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/_pytest/fixtures.py\", line 938, in _teardown_yield_fixture\n    next(it)\n  File \"/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/pytest_httpx/__init__.py\", line 67, in httpx_mock\n    mock._assert_options()\n  File \"/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/pytest_httpx/_httpx_mock.py\", line 333, in _assert_options\n    assert not self._requests_not_matched, (\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"monkeypatch::0","time":{"start":1759509677864,"stop":1759509677864,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"use_cache::0","time":{"start":1759509677866,"stop":1759509677866,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"global_fake_fs::0","time":{"start":1759509677867,"stop":1759509677868,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"enable_cache::0","time":{"start":1759509677867,"stop":1759509677867,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"insert_assert_maybe_fail::0","time":{"start":1759509677869,"stop":1759509677869,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"insert_assert_session::0","time":{"start":1759509700684,"stop":1759509700684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.unit.db"},{"name":"suite","value":"test_caching"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2490-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.unit.db.test_caching"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cache_enabled","value":"True"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"305f2ecd1fea68b5.json","parameterValues":["True"]}
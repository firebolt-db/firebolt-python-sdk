{"uid":"d082b110e0078936","name":"test_anyio_backend_import_issue[0]","fullName":"tests.integration.dbapi.sync.V2.test_queries#test_anyio_backend_import_issue","historyId":"35c4e87402ec4efcb0e3d66d6b7a7095","time":{"start":1718783733482,"stop":1718783735161,"duration":1679},"status":"failed","statusMessage":"AssertionError: [OperationalError(\"Error executing query:\n  Database 'integration_testing__1718783690531' does not exist or not authori...rror(\"Error executing query:\n  Database 'integration_testing__1718783690531' does not exist or not authorized.\n  \"), ...]\nassert 24 == 0\n +  where 24 = len([OperationalError(\"Error executing query:\\nDatabase 'integration_testing__1718783690531' does not exist or not authorized.\\n\"), OperationalError(\"Error executing query:\\nDatabase 'integration_testing__1718783690531' does not exist or not authorized.\\n\"), OperationalError(\"Error executing query:\\nDatabase 'integration_testing__1718783690531' does not exist or not authorized.\\n\"), OperationalError(\"Error executing query:\\nDatabase 'integration_testing__1718783690531' does not exist or not authorized.\\n\"), OperationalError(\"Error executing query:\\nDatabase 'integration_testing__1718783690531' does not exist or not authorized.\\n\"), OperationalError(\"Error executing query:\\nDatabase 'integration_testing__1718783690531' does not exist or not authorized.\\n\"), ...])","statusTrace":"engine_name = 'integration_testing__1718783690531'\ndatabase_name = 'integration_testing__1718783690531'\nauth = <firebolt.client.auth.client_credentials.ClientCredentials object at 0x7fb0bffd4940>\naccount_name = 'automation', api_endpoint = 'api.staging.firebolt.io', _ = 0\n\n    @mark.parametrize(\"_\", range(5))\n    def test_anyio_backend_import_issue(\n        engine_name: str,\n        database_name: str,\n        auth: Auth,\n        account_name: str,\n        api_endpoint: str,\n        _: int,\n    ) -> None:\n        threads_cnt = 3\n        requests_cnt = 8\n        # collect threads exceptions in an array because they're ignored otherwise\n        exceptions = []\n    \n        def run_query(idx: int):\n            nonlocal auth, database_name, engine_name, account_name, api_endpoint\n            try:\n                with connect(\n                    auth=auth,\n                    database=database_name,\n                    account_name=account_name,\n                    engine_name=engine_name,\n                    api_endpoint=api_endpoint,\n                ) as c:\n                    cursor = c.cursor()\n                    cursor.execute(f\"select {idx}\")\n            except BaseException as e:\n                exceptions.append(e)\n    \n        def run_queries_parallel() -> None:\n            nonlocal requests_cnt\n            threads = [Thread(target=run_query, args=(i,)) for i in range(requests_cnt)]\n            [t.start() for t in threads]\n            [t.join() for t in threads]\n    \n        threads = [Thread(target=run_queries_parallel) for _ in range(threads_cnt)]\n    \n        [t.start() for t in threads]\n        [t.join() for t in threads]\n>       assert len(exceptions) == 0, exceptions\nE       AssertionError: [OperationalError(\"Error executing query:\nE         Database 'integration_testing__1718783690531' does not exist or not authori...rror(\"Error executing query:\nE         Database 'integration_testing__1718783690531' does not exist or not authorized.\nE         \"), ...]\nE       assert 24 == 0\nE        +  where 24 = len([OperationalError(\"Error executing query:\\nDatabase 'integration_testing__1718783690531' does not exist or not authorized.\\n\"), OperationalError(\"Error executing query:\\nDatabase 'integration_testing__1718783690531' does not exist or not authorized.\\n\"), OperationalError(\"Error executing query:\\nDatabase 'integration_testing__1718783690531' does not exist or not authorized.\\n\"), OperationalError(\"Error executing query:\\nDatabase 'integration_testing__1718783690531' does not exist or not authorized.\\n\"), OperationalError(\"Error executing query:\\nDatabase 'integration_testing__1718783690531' does not exist or not authorized.\\n\"), OperationalError(\"Error executing query:\\nDatabase 'integration_testing__1718783690531' does not exist or not authorized.\\n\"), ...])\n\ntests/integration/dbapi/sync/V2/test_queries.py:365: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"engine_name","time":{"start":1718783731513,"stop":1718783731514,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"service_id","time":{"start":1718783731514,"stop":1718783731514,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"service_secret","time":{"start":1718783731514,"stop":1718783731514,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"database_name","time":{"start":1718783731514,"stop":1718783731514,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth","time":{"start":1718783731514,"stop":1718783731629,"duration":115},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_endpoint","time":{"start":1718783731630,"stop":1718783731630,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"account_name","time":{"start":1718783731630,"stop":1718783731630,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests.integration.dbapi.sync.V2"},{"name":"suite","value":"test_queries"},{"name":"host","value":"fv-az1382-384"},{"name":"thread","value":"2192-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.integration.dbapi.sync.V2.test_queries"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"_","value":"0"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"d082b110e0078936.json","parameterValues":["0"]}
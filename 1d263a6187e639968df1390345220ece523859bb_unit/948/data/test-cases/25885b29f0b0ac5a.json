{
  "uid" : "25885b29f0b0ac5a",
  "name" : "test_from_asyncio",
  "fullName" : "tests.unit.async_db.test_connection#test_from_asyncio",
  "historyId" : "a177ee6f941f567437b5aff68dd1cecb",
  "time" : {
    "start" : 1697728133947,
    "stop" : 1697728133948,
    "duration" : 1
  },
  "status" : "broken",
  "statusMessage" : "ValueError: a coroutine was expected, got <function test_from_asyncio.<locals>.async_flow at 0x7f307ce06dd0>",
  "statusTrace" : "httpx_mock = <pytest_httpx._httpx_mock.HTTPXMock object at 0x7f307cbff910>\nauth_callback = <function auth_callback.<locals>.do_mock at 0x7f307cca0830>\nauth_url = 'https://api-dev.mock.firebolt.io/auth/v1/login'\nquery_callback = <function query_callback.<locals>.do_query at 0x7f307cd2f3b0>\nquery_url = URL('https://api-dev.mock.firebolt.io/?database=database&output_format=JSON_Compact')\nsettings = Settings(auth=None, user='email@domain.com', password='*****', access_token=None, account_name=None, server='api-dev.mock.firebolt.io', default_region='mock_region_1', use_token_cache=True)\ndb_name = 'database'\n\n    def test_from_asyncio(\n        httpx_mock: HTTPXMock,\n        auth_callback: Callable,\n        auth_url: str,\n        query_callback: Callable,\n        query_url: str,\n        settings: Settings,\n        db_name: str,\n    ):\n        async def async_flow():\n            async with (\n                await connect(\n                    engine_url=settings.server,\n                    database=db_name,\n                    username=\"u\",\n                    password=\"p\",\n                    account_name=settings.account_name,\n                    api_endpoint=settings.server,\n                )\n            ) as connection:\n                cursor = connection.cursor()\n                await cursor.execute(\"SELECT 1\")\n                await cursor.fetchone()\n                await cursor.fetchmany(1)\n                await cursor.fetchall()\n    \n        httpx_mock.add_callback(auth_callback, url=auth_url)\n        httpx_mock.add_callback(query_callback, url=query_url)\n>       run(async_flow)\n\n/home/runner/work/firebolt-python-sdk/firebolt-python-sdk/tests/unit/async_db/test_connection.py:456: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmain = <function test_from_asyncio.<locals>.async_flow at 0x7f307ce06dd0>\n\n    def run(main, *, debug=False):\n        \"\"\"Execute the coroutine and return the result.\n    \n        This function runs the passed coroutine, taking care of\n        managing the asyncio event loop and finalizing asynchronous\n        generators.\n    \n        This function cannot be called when another asyncio event loop is\n        running in the same thread.\n    \n        If debug is True, the event loop will be run in debug mode.\n    \n        This function always creates a new event loop and closes it at the end.\n        It should be used as a main entry point for asyncio programs, and should\n        ideally only be called once.\n    \n        Example:\n    \n            async def main():\n                await asyncio.sleep(1)\n                print('hello')\n    \n            asyncio.run(main())\n        \"\"\"\n        if events._get_running_loop() is not None:\n            raise RuntimeError(\n                \"asyncio.run() cannot be called from a running event loop\")\n    \n        if not coroutines.iscoroutine(main):\n>           raise ValueError(\"a coroutine was expected, got {!r}\".format(main))\nE           ValueError: a coroutine was expected, got <function test_from_asyncio.<locals>.async_flow at 0x7f307ce06dd0>\n\n/opt/hostedtoolcache/Python/3.7.17/x64/lib/python3.7/asyncio/runners.py:37: ValueError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "query_callback",
    "time" : {
      "start" : 1697728133945,
      "stop" : 1697728133945,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "query_data",
    "time" : {
      "start" : 1697728133945,
      "stop" : 1697728133945,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "httpx_mock",
    "time" : {
      "start" : 1697728133942,
      "stop" : 1697728133943,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "settings",
    "time" : {
      "start" : 1697728133944,
      "stop" : 1697728133944,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "assert_all_responses_were_requested",
    "time" : {
      "start" : 1697728133942,
      "stop" : 1697728133942,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "query_description",
    "time" : {
      "start" : 1697728133945,
      "stop" : 1697728133945,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "password",
    "time" : {
      "start" : 1697728133944,
      "stop" : 1697728133944,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "query_url",
    "time" : {
      "start" : 1697728143970,
      "stop" : 1697728143971,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "username",
    "time" : {
      "start" : 1697728133943,
      "stop" : 1697728133943,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "auth_url",
    "time" : {
      "start" : 1697728133944,
      "stop" : 1697728133944,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "server",
    "time" : {
      "start" : 1697728133943,
      "stop" : 1697728133943,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "query_data",
    "time" : {
      "start" : 1697728143970,
      "stop" : 1697728143970,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "query_description",
    "time" : {
      "start" : 1697728143970,
      "stop" : 1697728143970,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "region_1",
    "time" : {
      "start" : 1697728133943,
      "stop" : 1697728133943,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "global_fake_fs",
    "time" : {
      "start" : 1697728133939,
      "stop" : 1697728133942,
      "duration" : 3
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "monkeypatch",
    "time" : {
      "start" : 1697728133942,
      "stop" : 1697728133942,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "query_callback",
    "time" : {
      "start" : 1697728143970,
      "stop" : 1697728143970,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "db_name",
    "time" : {
      "start" : 1697728133945,
      "stop" : 1697728133945,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "query_url",
    "time" : {
      "start" : 1697728133946,
      "stop" : 1697728133946,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "provider",
    "time" : {
      "start" : 1697728133943,
      "stop" : 1697728133943,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "non_mocked_hosts",
    "time" : {
      "start" : 1697728133942,
      "stop" : 1697728133942,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "auth_callback",
    "time" : {
      "start" : 1697728133945,
      "stop" : 1697728133945,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "ValueError: a coroutine was expected, got <function test_from_asyncio.<locals>.async_flow at 0x7f307ce06dd0>",
    "statusTrace" : "httpx_mock = <pytest_httpx._httpx_mock.HTTPXMock object at 0x7f307cbff910>\nauth_callback = <function auth_callback.<locals>.do_mock at 0x7f307cca0830>\nauth_url = 'https://api-dev.mock.firebolt.io/auth/v1/login'\nquery_callback = <function query_callback.<locals>.do_query at 0x7f307cd2f3b0>\nquery_url = URL('https://api-dev.mock.firebolt.io/?database=database&output_format=JSON_Compact')\nsettings = Settings(auth=None, user='email@domain.com', password='*****', access_token=None, account_name=None, server='api-dev.mock.firebolt.io', default_region='mock_region_1', use_token_cache=True)\ndb_name = 'database'\n\n    def test_from_asyncio(\n        httpx_mock: HTTPXMock,\n        auth_callback: Callable,\n        auth_url: str,\n        query_callback: Callable,\n        query_url: str,\n        settings: Settings,\n        db_name: str,\n    ):\n        async def async_flow():\n            async with (\n                await connect(\n                    engine_url=settings.server,\n                    database=db_name,\n                    username=\"u\",\n                    password=\"p\",\n                    account_name=settings.account_name,\n                    api_endpoint=settings.server,\n                )\n            ) as connection:\n                cursor = connection.cursor()\n                await cursor.execute(\"SELECT 1\")\n                await cursor.fetchone()\n                await cursor.fetchmany(1)\n                await cursor.fetchall()\n    \n        httpx_mock.add_callback(auth_callback, url=auth_url)\n        httpx_mock.add_callback(query_callback, url=query_url)\n>       run(async_flow)\n\n/home/runner/work/firebolt-python-sdk/firebolt-python-sdk/tests/unit/async_db/test_connection.py:456: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmain = <function test_from_asyncio.<locals>.async_flow at 0x7f307ce06dd0>\n\n    def run(main, *, debug=False):\n        \"\"\"Execute the coroutine and return the result.\n    \n        This function runs the passed coroutine, taking care of\n        managing the asyncio event loop and finalizing asynchronous\n        generators.\n    \n        This function cannot be called when another asyncio event loop is\n        running in the same thread.\n    \n        If debug is True, the event loop will be run in debug mode.\n    \n        This function always creates a new event loop and closes it at the end.\n        It should be used as a main entry point for asyncio programs, and should\n        ideally only be called once.\n    \n        Example:\n    \n            async def main():\n                await asyncio.sleep(1)\n                print('hello')\n    \n            asyncio.run(main())\n        \"\"\"\n        if events._get_running_loop() is not None:\n            raise RuntimeError(\n                \"asyncio.run() cannot be called from a running event loop\")\n    \n        if not coroutines.iscoroutine(main):\n>           raise ValueError(\"a coroutine was expected, got {!r}\".format(main))\nE           ValueError: a coroutine was expected, got <function test_from_asyncio.<locals>.async_flow at 0x7f307ce06dd0>\n\n/opt/hostedtoolcache/Python/3.7.17/x64/lib/python3.7/asyncio/runners.py:37: ValueError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "cefdc9359e03e446",
      "name" : "log",
      "source" : "cefdc9359e03e446.txt",
      "type" : "text/plain",
      "size" : 410
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "httpx_mock::0",
    "time" : {
      "start" : 1697728134008,
      "stop" : 1697728134010,
      "duration" : 2
    },
    "status" : "failed",
    "statusMessage" : "AssertionError: The following responses are mocked but not requested:\n  Match all requests on https://api-dev.mock.firebolt.io/auth/v1/login\n  Match all requests on https://api-dev.mock.firebolt.io/?database=database&output_format=JSON_Compact\nassert not [<pytest_httpx._httpx_mock._RequestMatcher object at 0x7f307ccb6d50>, <pytest_httpx._httpx_mock._RequestMatcher object at 0x7f307ccb65d0>]\n",
    "statusTrace" : "  File \"/opt/hostedtoolcache/Python/3.7.17/x64/lib/python3.7/site-packages/allure_commons/_allure.py\", line 221, in __call__\n    return self._fixture_function(*args, **kwargs)\n  File \"/opt/hostedtoolcache/Python/3.7.17/x64/lib/python3.7/site-packages/_pytest/fixtures.py\", line 916, in _teardown_yield_fixture\n    next(it)\n  File \"/opt/hostedtoolcache/Python/3.7.17/x64/lib/python3.7/site-packages/pytest_httpx/__init__.py\", line 65, in httpx_mock\n    mock.reset(assert_all_responses_were_requested)\n  File \"/opt/hostedtoolcache/Python/3.7.17/x64/lib/python3.7/site-packages/pytest_httpx/_httpx_mock.py\", line 309, in reset\n    assert (\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  }, {
    "name" : "global_fake_fs::0",
    "time" : {
      "start" : 1697728134012,
      "stop" : 1697728134013,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "monkeypatch::0",
    "time" : {
      "start" : 1697728134011,
      "stop" : 1697728134011,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "tests.unit.async_db"
  }, {
    "name" : "suite",
    "value" : "test_connection"
  }, {
    "name" : "host",
    "value" : "fv-az563-912"
  }, {
    "name" : "thread",
    "value" : "2221-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.unit.async_db.test_connection"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "25885b29f0b0ac5a.json",
  "parameterValues" : [ ]
}
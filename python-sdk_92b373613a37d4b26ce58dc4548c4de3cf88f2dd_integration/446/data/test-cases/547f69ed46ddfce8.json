{"uid":"547f69ed46ddfce8","name":"test_system_engine_no_db","fullName":"tests.integration.dbapi.sync.V2.test_system_engine#test_system_engine_no_db","historyId":"ac3676cb04f30c4a6bad734a8043b1f6","time":{"start":1736432811736,"stop":1736432816891,"duration":5155},"description":"Connecting with engine name is handled properly.","descriptionHtml":"<p>Connecting with engine name is handled properly.</p>\n","status":"failed","statusMessage":"AssertionError: Invalid error message\nassert None\n +  where None = <built-in method search of re.Pattern object at 0x56027dc7b330>(\"- The object you're trying to access is not an organization-wide or account-level object. Please use the USE DATABASE statement to select a database.\")\n +    where <built-in method search of re.Pattern object at 0x56027dc7b330> = re.compile(\"system engine doesn't support .* statements. Run this statement on a user engine.\").search\n +    and   \"- The object you're trying to access is not an organization-wide or account-level object. Please use the USE DATABASE statement to select a database.\" = str(FireboltStructuredError({'errors': [{'description': \"The object you're trying to access is not an organization-wide or account-level object. Please use the USE DATABASE statement to select a database.\"}], 'query': {'query_id': '8e9b6000-eff4-4f0e-a991-a684b7e64dc9', 'request_id': 'e4deb927-0c40-451d-8a6f-d8d717008035'}, 'statistics': {'elapsed': 0.0}}))\n +      where FireboltStructuredError({'errors': [{'description': \"The object you're trying to access is not an organization-wide or account-level object. Please use the USE DATABASE statement to select a database.\"}], 'query': {'query_id': '8e9b6000-eff4-4f0e-a991-a684b7e64dc9', 'request_id': 'e4deb927-0c40-451d-8a6f-d8d717008035'}, 'statistics': {'elapsed': 0.0}}) = <ExceptionInfo FireboltStructuredError({'errors': [{'description': \"The object you're trying to access is not an organization-wide or...0-eff4-4f0e-a991-a684b7e64dc9', 'request_id': 'e4deb927-0c40-451d-8a6f-d8d717008035'}, 'statistics': {'elapsed': 0.0}}) tblen=6>.value","statusTrace":"connection_system_engine_no_db = <firebolt.db.connection.Connection object at 0x7f8d2d3d8d60>\nall_types_query = 'select 1 as uint8, -1 as int_8, 257 as uint16, -257 as int16, 80000 as uint32, -80000 as int32, 30000000000 as uint64...232.123459999990457054844258706536\\' as decimal(38,30)) as \"decimal\", null as \"nullable\", \\'abc123\\'::bytea as \"bytea\"'\nall_types_query_description = [Column(name='uint8', type_code=<class 'int'>, display_size=None, internal_size=None, precision=None, scale=None, null...int32', type_code=<class 'int'>, display_size=None, internal_size=None, precision=None, scale=None, null_ok=None), ...]\nall_types_query_system_engine_response = [[1, -1, 257, -257, 80000, -80000, ...]]\ntimezone_name = 'Asia/Calcutta'\n\n    def test_system_engine_no_db(\n        connection_system_engine_no_db: Connection,\n        all_types_query: str,\n        all_types_query_description: List[Column],\n        all_types_query_system_engine_response: List[ColType],\n        timezone_name: str,\n    ) -> None:\n        \"\"\"Connecting with engine name is handled properly.\"\"\"\n>       test_system_engine(\n            connection_system_engine_no_db,\n            all_types_query,\n            all_types_query_description,\n            all_types_query_system_engine_response,\n            timezone_name,\n        )\n\ntests/integration/dbapi/sync/V2/test_system_engine.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nconnection_system_engine = <firebolt.db.connection.Connection object at 0x7f8d2d3d8d60>\nall_types_query = 'select 1 as uint8, -1 as int_8, 257 as uint16, -257 as int16, 80000 as uint32, -80000 as int32, 30000000000 as uint64...232.123459999990457054844258706536\\' as decimal(38,30)) as \"decimal\", null as \"nullable\", \\'abc123\\'::bytea as \"bytea\"'\nall_types_query_description = [Column(name='uint8', type_code=<class 'int'>, display_size=None, internal_size=None, precision=None, scale=None, null...int32', type_code=<class 'int'>, display_size=None, internal_size=None, precision=None, scale=None, null_ok=None), ...]\nall_types_query_system_engine_response = [[1, -1, 257, -257, 80000, -80000, ...]]\ntimezone_name = 'Asia/Calcutta'\n\n    def test_system_engine(\n        connection_system_engine: Connection,\n        all_types_query: str,\n        all_types_query_description: List[Column],\n        all_types_query_system_engine_response: List[ColType],\n        timezone_name: str,\n    ) -> None:\n        \"\"\"Connecting with engine name is handled properly.\"\"\"\n        with connection_system_engine.cursor() as c:\n            assert c.execute(all_types_query) == 1, \"Invalid row count returned\"\n            assert c.rowcount == 1, \"Invalid rowcount value\"\n            data = c.fetchall()\n            assert len(data) == c.rowcount, \"Invalid data length\"\n            assert_deep_eq(data, all_types_query_system_engine_response, \"Invalid data\")\n            assert c.description == all_types_query_description, \"Invalid description value\"\n            assert len(data[0]) == len(c.description), \"Invalid description length\"\n            assert len(c.fetchall()) == 0, \"Redundant data returned by fetchall\"\n    \n            # Different fetch types\n            c.execute(all_types_query)\n            assert (\n                c.fetchone() == all_types_query_system_engine_response[0]\n            ), \"Invalid fetchone data\"\n            assert c.fetchone() is None, \"Redundant data returned by fetchone\"\n    \n            c.execute(all_types_query)\n            assert len(c.fetchmany(0)) == 0, \"Invalid data size returned by fetchmany\"\n            data = c.fetchmany()\n            assert len(data) == 1, \"Invalid data size returned by fetchmany\"\n            assert_deep_eq(\n                data,\n                all_types_query_system_engine_response,\n                \"Invalid data returned by fetchmany\",\n            )\n    \n            c.execute(\"show databases\")\n            c.execute(\"show tables\")\n            with raises(FireboltStructuredError) as e:\n                # Either one or another query fails if we're not on a user engine\n                c.execute('create table if not exists \"test_sync\"(id int)')\n                c.execute('insert into \"test_sync\" values (1)')\n>           assert system_error_pattern.search(str(e.value)), \"Invalid error message\"\nE           AssertionError: Invalid error message\nE           assert None\nE            +  where None = <built-in method search of re.Pattern object at 0x56027dc7b330>(\"- The object you're trying to access is not an organization-wide or account-level object. Please use the USE DATABASE statement to select a database.\")\nE            +    where <built-in method search of re.Pattern object at 0x56027dc7b330> = re.compile(\"system engine doesn't support .* statements. Run this statement on a user engine.\").search\nE            +    and   \"- The object you're trying to access is not an organization-wide or account-level object. Please use the USE DATABASE statement to select a database.\" = str(FireboltStructuredError({'errors': [{'description': \"The object you're trying to access is not an organization-wide or account-level object. Please use the USE DATABASE statement to select a database.\"}], 'query': {'query_id': '8e9b6000-eff4-4f0e-a991-a684b7e64dc9', 'request_id': 'e4deb927-0c40-451d-8a6f-d8d717008035'}, 'statistics': {'elapsed': 0.0}}))\nE            +      where FireboltStructuredError({'errors': [{'description': \"The object you're trying to access is not an organization-wide or account-level object. Please use the USE DATABASE statement to select a database.\"}], 'query': {'query_id': '8e9b6000-eff4-4f0e-a991-a684b7e64dc9', 'request_id': 'e4deb927-0c40-451d-8a6f-d8d717008035'}, 'statistics': {'elapsed': 0.0}}) = <ExceptionInfo FireboltStructuredError({'errors': [{'description': \"The object you're trying to access is not an organization-wide or...0-eff4-4f0e-a991-a684b7e64dc9', 'request_id': 'e4deb927-0c40-451d-8a6f-d8d717008035'}, 'statistics': {'elapsed': 0.0}}) tblen=6>.value\n\ntests/integration/dbapi/sync/V2/test_system_engine.py:57: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"account_name","time":{"start":1736432792084,"stop":1736432792084,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"service_secret","time":{"start":1736432792084,"stop":1736432792084,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"service_id","time":{"start":1736432792084,"stop":1736432792084,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth","time":{"start":1736432792084,"stop":1736432792217,"duration":133},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_endpoint","time":{"start":1736432792084,"stop":1736432792084,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"connection_system_engine_no_db","time":{"start":1736432811420,"stop":1736432811734,"duration":314},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"all_types_query","time":{"start":1736432811735,"stop":1736432811735,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"all_types_query_system_engine_response","time":{"start":1736432811735,"stop":1736432811735,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"timezone_name","time":{"start":1736432811735,"stop":1736432811735,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"timezone_offset_seconds","time":{"start":1736432811735,"stop":1736432811735,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"all_types_query_description","time":{"start":1736432811735,"stop":1736432811735,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"connection_system_engine_no_db::0","time":{"start":1736432816906,"stop":1736432816906,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.integration.dbapi.sync.V2"},{"name":"suite","value":"test_system_engine"},{"name":"host","value":"fv-az1373-191"},{"name":"thread","value":"2331-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.integration.dbapi.sync.V2.test_system_engine"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"547f69ed46ddfce8.json","parameterValues":[]}
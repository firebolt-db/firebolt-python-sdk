{"uid":"50b587976dac83ea","name":"test_parse_json_lines_record[record_data3-ErrorRecord-FINISH_WITH_ERROR]","fullName":"tests.unit.common.row_set.test_json_lines#test_parse_json_lines_record","historyId":"d57993f39dde6d414a0b1d5416f3014d","time":{"start":1744966508053,"stop":1744966508053,"duration":0},"description":"Test that parse_json_lines_record correctly parses various record types.","descriptionHtml":"<p>Test that parse_json_lines_record correctly parses various record types.</p>\n","status":"broken","statusMessage":"ValueError: 'FINISH_WITH_ERROR' is not a valid MessageType","statusTrace":"record_data = {'errors': [{'code': 123, 'message': 'error message'}], 'message_type': 'FINISH_WITH_ERROR', 'query_id': 'query_id', 'query_label': 'query_label', ...}\nexpected_type = <class 'firebolt.common.row_set.json_lines.ErrorRecord'>\nmessage_type_value = 'FINISH_WITH_ERROR'\n\n    @mark.parametrize(\n        \"record_data,expected_type,message_type_value\",\n        [\n            (\n                {\n                    \"message_type\": \"START\",\n                    \"result_columns\": [{\"name\": \"col1\", \"type\": \"int\"}],\n                    \"query_id\": \"query_id\",\n                    \"query_label\": \"query_label\",\n                    \"request_id\": \"request_id\",\n                },\n                StartRecord,\n                \"START\",\n            ),\n            (\n                {\n                    \"message_type\": \"DATA\",\n                    \"data\": [[1, 2, 3]],\n                },\n                DataRecord,\n                \"DATA\",\n            ),\n            (\n                {\n                    \"message_type\": \"FINISH_SUCCESSFULLY\",\n                    \"statistics\": {\n                        \"elapsed\": 0.1,\n                        \"rows_read\": 10,\n                        \"bytes_read\": 100,\n                        \"time_before_execution\": 0.01,\n                        \"time_to_execute\": 0.09,\n                    },\n                },\n                SuccessRecord,\n                \"FINISH_SUCCESSFULLY\",\n            ),\n            (\n                {\n                    \"message_type\": \"FINISH_WITH_ERROR\",\n                    \"errors\": [{\"message\": \"error message\", \"code\": 123}],\n                    \"query_id\": \"query_id\",\n                    \"query_label\": \"query_label\",\n                    \"request_id\": \"request_id\",\n                    \"statistics\": {\n                        \"elapsed\": 0.1,\n                        \"rows_read\": 10,\n                        \"bytes_read\": 100,\n                        \"time_before_execution\": 0.01,\n                        \"time_to_execute\": 0.09,\n                    },\n                },\n                ErrorRecord,\n                \"FINISH_WITH_ERROR\",\n            ),\n        ],\n    )\n    def test_parse_json_lines_record(\n        record_data: Dict[str, Any],\n        expected_type: Type[JSONLinesRecord],\n        message_type_value: str,\n    ):\n        \"\"\"Test that parse_json_lines_record correctly parses various record types.\"\"\"\n        # Copy the record to avoid modifying the original during parsing\n        record_data_copy = deepcopy(record_data)\n>       record = parse_json_lines_record(record_data_copy)\n\n/home/runner/work/firebolt-python-sdk/firebolt-python-sdk/tests/unit/common/row_set/test_json_lines.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/home/runner/work/firebolt-python-sdk/firebolt-python-sdk/src/firebolt/common/row_set/json_lines.py:74: in parse_json_lines_record\n    message_type = MessageType(record[\"message_type\"])\n/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/enum.py:339: in __call__\n    return cls.__new__(cls, value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <enum 'MessageType'>, value = 'FINISH_WITH_ERROR'\n\n    def __new__(cls, value):\n        # all enum instances are actually created during class construction\n        # without calling this method; this method is called by the metaclass'\n        # __call__ (i.e. Color(3) ), and by pickle\n        if type(value) is cls:\n            # For lookups like Color(Color.RED)\n            return value\n        # by-value search for a matching enum member\n        # see if it's in the reverse mapping (for hashable values)\n        try:\n            return cls._value2member_map_[value]\n        except KeyError:\n            # Not found, no need to do long O(n) search\n            pass\n        except TypeError:\n            # not there, now do long search -- O(n) behavior\n            for member in cls._member_map_.values():\n                if member._value_ == value:\n                    return member\n        # still not found -- try _missing_ hook\n        try:\n            exc = None\n            result = cls._missing_(value)\n        except Exception as e:\n            exc = e\n            result = None\n        try:\n            if isinstance(result, cls):\n                return result\n            else:\n                ve_exc = ValueError(\"%r is not a valid %s\" % (value, cls.__name__))\n                if result is None and exc is None:\n>                   raise ve_exc\nE                   ValueError: 'FINISH_WITH_ERROR' is not a valid MessageType\n\n/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/enum.py:663: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"clear_cache","time":{"start":1744966508049,"stop":1744966508050,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"global_fake_fs","time":{"start":1744966508050,"stop":1744966508051,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"global_fake_fs::0","time":{"start":1744966508120,"stop":1744966508121,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.unit.common.row_set"},{"name":"suite","value":"test_json_lines"},{"name":"host","value":"fv-az1982-717"},{"name":"thread","value":"2397-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.unit.common.row_set.test_json_lines"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected_type","value":"<class 'firebolt.common.row_set.json_lines.ErrorRecord'>"},{"name":"message_type_value","value":"'FINISH_WITH_ERROR'"},{"name":"record_data","value":"{'message_type': 'FINISH_WITH_ERROR', 'errors': [{'message': 'error message', 'code': 123}], 'query_id': 'query_id', 'query_label': 'query_label', 'request_id': 'request_id', 'statistics': {'elapsed': 0.1, 'rows_read': 10, 'bytes_read': 100, 'time_before_execution': 0.01, 'time_to_execute': 0.09}}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"50b587976dac83ea.json","parameterValues":["<class 'firebolt.common.row_set.json_lines.ErrorRecord'>","'FINISH_WITH_ERROR'","{'message_type': 'FINISH_WITH_ERROR', 'errors': [{'message': 'error message', 'code': 123}], 'query_id': 'query_id', 'query_label': 'query_label', 'request_id': 'request_id', 'statistics': {'elapsed': 0.1, 'rows_read': 10, 'bytes_read': 100, 'time_before_execution': 0.01, 'time_to_execute': 0.09}}"]}
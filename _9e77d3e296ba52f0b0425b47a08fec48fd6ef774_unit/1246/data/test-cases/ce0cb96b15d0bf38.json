{"uid":"ce0cb96b15d0bf38","name":"test_connect_caching[True]","fullName":"tests.unit.db.test_connection#test_connect_caching","historyId":"d696a77f76f4bb8d897419f7b893e9d1","time":{"start":1733139462732,"stop":1733139463166,"duration":434},"status":"failed","statusMessage":"AssertionError: System engine URL was not cached\nassert 3 == 1","statusTrace":"db_name = 'database', engine_name = 'mock_engine_name'\nauth_url = 'https://id.mock.firebolt.io/oauth/token'\napi_endpoint = 'api-dev.mock.firebolt.io'\nauth = <firebolt.client.auth.client_credentials.ClientCredentials object at 0x7feaac7f78c0>\naccount_name = 'mock_account_name'\nhttpx_mock = <pytest_httpx._httpx_mock.HTTPXMock object at 0x7feaafdbe8e0>\ncheck_credentials_callback = <function check_credentials_callback.<locals>.check_credentials at 0x7feaac7ecc10>\nget_system_engine_url = URL('https://api-dev.mock.firebolt.io/web/v3/account/mock_account_name/engineUrl')\nget_system_engine_callback = <function get_system_engine_callback.<locals>.inner at 0x7feaac7ec4c0>\nsystem_engine_query_url = 'https://bravo.a.eu-west-1.aws.mock.firebolt.io/?output_format=JSON_Compact&database=database'\nsystem_engine_no_db_query_url = 'https://bravo.a.eu-west-1.aws.mock.firebolt.io/?output_format=JSON_Compact'\nquery_url = URL('https://mock_engine_name.mock.firebolt.io/?output_format=JSON_Compact&database=database')\nuse_database_callback = <function use_database_callback.<locals>.inner at 0x7feaac7ec310>\nuse_engine_callback = <function use_engine_callback.<locals>.inner at 0x7feaac7ec040>\nquery_callback = <function query_callback.<locals>.do_query at 0x7feaace680d0>\ncache_enabled = True\n\n    @mark.parametrize(\"cache_enabled\", [True, False])\n    def test_connect_caching(\n        db_name: str,\n        engine_name: str,\n        auth_url: str,\n        api_endpoint: str,\n        auth: Auth,\n        account_name: str,\n        httpx_mock: HTTPXMock,\n        check_credentials_callback: Callable,\n        get_system_engine_url: str,\n        get_system_engine_callback: Callable,\n        system_engine_query_url: str,\n        system_engine_no_db_query_url: str,\n        query_url: str,\n        use_database_callback: Callable,\n        use_engine_callback: Callable,\n        query_callback: Callable,\n        cache_enabled: bool,\n    ):\n        system_engine_call_counter = 0\n    \n        def system_engine_callback_counter(request, **kwargs):\n            nonlocal system_engine_call_counter\n            system_engine_call_counter += 1\n            return get_system_engine_callback(request, **kwargs)\n    \n        httpx_mock.add_callback(check_credentials_callback, url=auth_url)\n        httpx_mock.add_callback(system_engine_callback_counter, url=get_system_engine_url)\n        httpx_mock.add_callback(\n            use_database_callback,\n            url=system_engine_no_db_query_url,\n            match_content=f'USE DATABASE \"{db_name}\"'.encode(\"utf-8\"),\n        )\n    \n        httpx_mock.add_callback(\n            use_engine_callback,\n            url=system_engine_query_url,\n            match_content=f'USE ENGINE \"{engine_name}\"'.encode(\"utf-8\"),\n        )\n        httpx_mock.add_callback(query_callback, url=query_url)\n    \n        for _ in range(3):\n            with connect(\n                database=db_name,\n                engine_name=engine_name,\n                auth=auth,\n                account_name=account_name,\n                api_endpoint=api_endpoint,\n                disable_cache=not cache_enabled,\n            ) as connection:\n                connection.cursor().execute(\"select*\")\n    \n        if cache_enabled:\n>           assert system_engine_call_counter == 1, \"System engine URL was not cached\"\nE           AssertionError: System engine URL was not cached\nE           assert 3 == 1\n\n/home/runner/work/firebolt-python-sdk/firebolt-python-sdk/tests/unit/db/test_connection.py:246: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"global_fake_fs","time":{"start":1733139462638,"stop":1733139462641,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_cache","time":{"start":1733139462638,"stop":1733139462638,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"global_fake_fs::0","time":{"start":1733139463272,"stop":1733139463272,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.unit.db"},{"name":"suite","value":"test_connection"},{"name":"host","value":"fv-az1393-586"},{"name":"thread","value":"2099-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.unit.db.test_connection"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cache_enabled","value":"True"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"ce0cb96b15d0bf38.json","parameterValues":["True"]}
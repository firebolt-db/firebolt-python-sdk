name: Core integration tests
# Note: This workflow requires Docker containers and will skip tests on macOS runners
# since GitHub's macOS runners don't support Docker. Tests run normally on Ubuntu.

on:
  workflow_dispatch:
    inputs:
      tag_version:
        description: 'The docker image tag for the firebolt core'
        required: false
        type: string
      python_version:
        description: 'Python version'
        required: false
        type: string
        default: '3.10'
      os_name:
        description: 'The operating system'
        required: false
        type: string
        default: 'ubuntu-latest'
  workflow_call:
    inputs:
      tag_version:
        description: 'The docker image tag for the firebolt core'
        required: false
        type: string
      python_version:
        description: 'Python version'
        required: false
        type: string
        default: '3.10'
      os_name:
        description: 'Operating system'
        required: false
        type: string
        default: 'ubuntu-latest'
      sendSlackNotifications:
        description: 'Send Slack notifications on failure'
        required: false
        type: boolean
        default: false
    secrets:
      SLACK_BOT_TOKEN:
        required: false
env:
  DEFAULT_IMAGE_TAG: ${{ vars.DEFAULT_CORE_IMAGE_TAG }}
jobs:
  run-core-integration-tests:
    runs-on: ${{ inputs.os_name }}
    env:
      DOCKER_COMPOSE_FILE: ${{ github.workspace }}/.github/resources/core/docker-compose.yml
      SERVICE_PORT: 3473
      SERVICE_URL: http://localhost:3473
      MAX_RETRIES: 30
      RETRY_INTERVAL: 2
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          repository: 'firebolt-db/firebolt-python-sdk'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ".[dev]"

      # Docker containers are not supported on GitHub's macOS runners
      - name: Skip Docker-based tests on macOS
        if: runner.os == 'macOS'
        run: |
          echo "::notice::Docker containers are not supported on GitHub's macOS runners"
          echo "::notice::Core integration tests require Docker and will be skipped on macOS"
          echo "::notice::Tests will run normally on Ubuntu runners"

      - name: Log in to GitHub Container Registry
        if: runner.os != 'macOS'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        if: runner.os != 'macOS'
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        if: runner.os != 'macOS'
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Write certificate and certificate key to file
        if: runner.os != 'macOS'
        run: |
          mkdir "${{ github.workspace }}/.github/resources/core/certs"
          pip install trustme
          # Generate a self-signed certificate for localhost
          python3 -m trustme -d "${{ github.workspace }}/.github/resources/core/certs/"

      - name: Install certs to keystore
        if: runner.os != 'macOS'
        run: |
          sudo cp ${GITHUB_WORKSPACE}/.github/resources/core/certs/client.pem /usr/local/share/ca-certificates/client.crt
          sudo update-ca-certificates

      # if no image tag was passed in, then use the image tag from the defaults
      - name: Set image tag
        id: set-tag
        run: |
          IMAGE_TAG="${{ inputs.tag_version }}"
          if [ -z "$IMAGE_TAG" ]; then
            IMAGE_TAG="$DEFAULT_IMAGE_TAG"
          fi
          echo "tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Prepare docker-compose.yml
        if: runner.os != 'macOS'
        run: |
          if [ ! -f "$DOCKER_COMPOSE_FILE" ]; then
            echo "Error: Docker compose file not found at $DOCKER_COMPOSE_FILE"
            exit 1
          fi
          sed -i "s|\${IMAGE_TAG}|${{ steps.set-tag.outputs.tag }}|g" "$DOCKER_COMPOSE_FILE"
          sed -i "s|\${BASE_DIR}|${{ github.workspace }}|g" "$DOCKER_COMPOSE_FILE"
          echo "Docker compose file prepared:"
          cat "$DOCKER_COMPOSE_FILE"

      - name: Start service container
        if: runner.os != 'macOS'
        run: |
          docker compose -f "$DOCKER_COMPOSE_FILE" up -d
          docker compose -f "$DOCKER_COMPOSE_FILE" ps

      - name: Wait for service to be ready
        if: runner.os != 'macOS'
        run: |
          for i in $(seq 1 $MAX_RETRIES); do
            if curl --silent --fail "$SERVICE_URL" --data-binary "SELECT 1" | grep -q "1"; then
              echo "Service is up and responding!"
              exit 0
            fi
            echo "Waiting for service... ($i/$MAX_RETRIES)"
            sleep $RETRY_INTERVAL
          done
          echo "Error: Service failed to start within timeout"
          docker compose -f "$DOCKER_COMPOSE_FILE" logs
          exit 1

      - name: Run integration tests HTTP
        if: runner.os != 'macOS'
        env:
          SERVICE_ID: ${{ secrets.FIREBOLT_CLIENT_ID_STG_NEW_IDN }}
          SERVICE_SECRET: ${{ secrets.FIREBOLT_CLIENT_SECRET_STG_NEW_IDN }}
          DATABASE_NAME: "firebolt"
          ENGINE_NAME: ""
          STOPPED_ENGINE_NAME: ""
          API_ENDPOINT: ""
          ACCOUNT_NAME: ""
          CORE_URL: "http://localhost:3473"
        run: |
          pytest -o log_cli=true -o log_cli_level=WARNING tests/integration -k "core"  --alluredir=allure-results/

      - name: Run integration tests HTTPS
        if: runner.os != 'macOS'
        env:
          SERVICE_ID: ${{ secrets.FIREBOLT_CLIENT_ID_STG_NEW_IDN }}
          SERVICE_SECRET: ${{ secrets.FIREBOLT_CLIENT_SECRET_STG_NEW_IDN }}
          DATABASE_NAME: "firebolt"
          ENGINE_NAME: ""
          STOPPED_ENGINE_NAME: ""
          API_ENDPOINT: ""
          ACCOUNT_NAME: ""
          CORE_URL: "https://localhost:443"
        run: |
          pytest -o log_cli=true -o log_cli_level=WARNING tests/integration -k "core"  --alluredir=allure-results-https/

      - name: Stop container
        if: always() && runner.os != 'macOS'
        run: |
          docker compose -f "$DOCKER_COMPOSE_FILE" down

       # Need to pull the pages branch in order to fetch the previous runs
      - name: Get Allure history
        uses: actions/checkout@v4
        if: always()
        continue-on-error: true
        with:
            ref: gh-pages
            path: gh-pages

      - name: Allure Report
        uses: firebolt-db/action-allure-report@v1
        if: always()
        continue-on-error: true
        with:
          github-key: ${{ secrets.GITHUB_TOKEN }}
          test-type: integration
          allure-dir: allure-results
          pages-branch: gh-pages
          repository-name: python-sdk

      - name: Allure Report HTTPS
        uses: firebolt-db/action-allure-report@v1
        if: always()
        continue-on-error: true
        with:
          github-key: ${{ secrets.GITHUB_TOKEN }}
          test-type: integration_https
          allure-dir: allure-results-https
          pages-branch: gh-pages
          repository-name: python-sdk

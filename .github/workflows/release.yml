name: Release new version

on:
  workflow_dispatch:
    inputs:
      preReleaseTag:
        required: false
        description: 'Tag for pre-release (optional)'
      majorRelease:
        required: false
        description: 'Trigger a major release (optional). Leave empty for regular release.'

jobs:
  integration-tests:
    uses: firebolt-db/firebolt-python-sdk/.github/workflows/integration-tests.yml@main

  publish:
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:    
    - name: Check out code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0 
    
    - name: Set up Python 3.7
      uses: actions/setup-python@v2
      with:
        python-version: 3.7
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ".[release]"
        
    - name: Setup git config
      run: |
        git config user.name "GitHub Actions Bot"
        git config user.email "<>"

    - name: Generate new version tag
      id: tag_generation
      run: |
        OLD_TAG=$(git describe --tags --abbrev=0)
        echo "Old tag was ${OLD_TAG}"
        CHANGE_LOG=$(git log $OLD_TAG..HEAD --pretty=format:%s)
        NEW_TAG=$(python3 ./ci/generate_version_tag.py "${CHANGE_LOG}" $OLD_TAG --prerelease_tag "${{ github.event.inputs.preReleaseTag }}" --major_release "${{ github.event.inputs.majorRelease }}")
        echo "::set-output name=new_tag::$NEW_TAG"

    - name: Version bump
      run: |
        # Bump __version__ = "<number>" in __init__.py
        sed -i "s/^__version__ = \".*\"/__version__ = \"${{ steps.tag_generation.outputs.new_tag }}\"/" src/firebolt/__init__.py
        git add src/firebolt/__init__.py
        git commit -m "Automatic version bump to ${{ steps.tag_generation.outputs.new_tag }}"
        git push origin main
        
    - name: Publish to github
      run: |
        git tag ${{ steps.tag_generation.outputs.new_tag }}
        git push origin ${{ steps.tag_generation.outputs.new_tag }}
        
    - name: Publish to pypi
      run: |
        python3 -m build
        python3 -m twine upload dist/*
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}

{"uid":"da2094b2059ed17a","name":"test_databases_get_many","fullName":"tests.integration.resource_manager.V2.test_database#test_databases_get_many","historyId":"79ab8a5576571cbb3ddbfabd812f66d8","time":{"start":1717764770898,"stop":1717764771186,"duration":288},"status":"failed","statusMessage":"AssertionError: assert 0 > 0\n +  where 0 = len([])","statusTrace":"auth = <firebolt.client.auth.client_credentials.ClientCredentials object at 0x7f5581c0dcc0>\naccount_name = 'automation', api_endpoint = 'api.staging.firebolt.io'\ndatabase_name = 'integration_testing__1717764463918'\nengine_name = 'integration_testing__1717764463918'\n\n    def test_databases_get_many(\n        auth: Auth,\n        account_name: str,\n        api_endpoint: str,\n        database_name: str,\n        engine_name: str,\n    ):\n        rm = ResourceManager(\n            auth=auth, account_name=account_name, api_endpoint=api_endpoint\n        )\n    \n        # get all databases, at least one should be returned\n        databases = rm.databases.get_many()\n        assert len(databases) > 0\n        assert database_name in {db.name for db in databases}\n    \n        # get all databases, with name_contains\n        databases = rm.databases.get_many(name_contains=database_name)\n        assert len(databases) > 0\n        assert database_name in {db.name for db in databases}\n    \n        # get all databases, with name_contains\n        databases = rm.databases.get_many(attached_engine_name_eq=engine_name)\n>       assert len(databases) > 0\nE       assert 0 > 0\nE        +  where 0 = len([])\n\ntests/integration/resource_manager/V2/test_database.py:59: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"database_name","time":{"start":1717764627110,"stop":1717764627111,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"engine_name","time":{"start":1717764627110,"stop":1717764627110,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"service_secret","time":{"start":1717764627111,"stop":1717764627111,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"service_id","time":{"start":1717764627111,"stop":1717764627111,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth","time":{"start":1717764627111,"stop":1717764627423,"duration":312},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_endpoint","time":{"start":1717764627424,"stop":1717764627425,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"account_name","time":{"start":1717764627425,"stop":1717764627425,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests.integration.resource_manager.V2"},{"name":"suite","value":"test_database"},{"name":"host","value":"fv-az1024-416"},{"name":"thread","value":"2196-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.integration.resource_manager.V2.test_database"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"da2094b2059ed17a.json","parameterValues":[]}
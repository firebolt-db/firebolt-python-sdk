{"uid":"ee324f19fa0a98ec","name":"test_cache_expiry_multiple_entries","fullName":"tests.unit.utils.test_cache#test_cache_expiry_multiple_entries","historyId":"7d9c3cf5fe12913f15f336e1ffdb8de9","time":{"start":1754490292540,"stop":1754490292542,"duration":2},"description":"Test that expiry works correctly with multiple cache entries.","descriptionHtml":"<p>Test that expiry works correctly with multiple cache entries.</p>\n","status":"failed","statusMessage":"AssertionError: assert ConnectionInfo(id='test_connection', expiry_time=1005400, system_engine=None, databases={}, engines={}) is None\n +  where ConnectionInfo(id='test_connection', expiry_time=1005400, system_engine=None, databases={}, engines={}) = <bound method UtilCache.get of <firebolt.utils.cache.UtilCache object at 0x7f25fde46760>>(SecureCacheKey(key1))\n +    where <bound method UtilCache.get of <firebolt.utils.cache.UtilCache object at 0x7f25fde46760>> = <firebolt.utils.cache.UtilCache object at 0x7f25fde46760>.get","statusTrace":"cache = <firebolt.utils.cache.UtilCache object at 0x7f25fde46760>\nadditional_cache_keys = {'key1': SecureCacheKey(key1), 'key2': SecureCacheKey(key2), 'key3': SecureCacheKey(user#other)}\nsample_connection_info = ConnectionInfo(id='test_connection', expiry_time=1005400, system_engine=None, databases={}, engines={})\nfixed_time = 1000000\n\n    def test_cache_expiry_multiple_entries(\n        cache, additional_cache_keys, sample_connection_info, fixed_time\n    ):\n        \"\"\"Test that expiry works correctly with multiple cache entries.\"\"\"\n        # Set multiple entries at different times\n        with patch(\"time.time\", return_value=fixed_time):\n            cache.set(additional_cache_keys[\"key1\"], sample_connection_info)\n    \n        with patch(\"time.time\", return_value=fixed_time + 1800):  # 30 minutes later\n            cache.set(additional_cache_keys[\"key2\"], sample_connection_info)\n    \n        # Check expiry of first entry while second is still valid\n        with patch(\"time.time\", return_value=fixed_time + CACHE_EXPIRY_SECONDS):\n>           assert cache.get(additional_cache_keys[\"key1\"]) is None  # Expired\nE           AssertionError: assert ConnectionInfo(id='test_connection', expiry_time=1005400, system_engine=None, databases={}, engines={}) is None\nE            +  where ConnectionInfo(id='test_connection', expiry_time=1005400, system_engine=None, databases={}, engines={}) = <bound method UtilCache.get of <firebolt.utils.cache.UtilCache object at 0x7f25fde46760>>(SecureCacheKey(key1))\nE            +    where <bound method UtilCache.get of <firebolt.utils.cache.UtilCache object at 0x7f25fde46760>> = <firebolt.utils.cache.UtilCache object at 0x7f25fde46760>.get\n\n/home/runner/work/firebolt-python-sdk/firebolt-python-sdk/tests/unit/utils/test_cache.py:302: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"disable_cache","time":{"start":1754490292537,"stop":1754490292537,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"clear_cache","time":{"start":1754490292537,"stop":1754490292537,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"global_fake_fs","time":{"start":1754490292537,"stop":1754490292539,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cache","time":{"start":1754490292539,"stop":1754490292539,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"additional_cache_keys","time":{"start":1754490292540,"stop":1754490292540,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"fixed_time","time":{"start":1754490292540,"stop":1754490292540,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"sample_connection_info","time":{"start":1754490292540,"stop":1754490292540,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"cache::0","time":{"start":1754490292554,"stop":1754490292554,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"global_fake_fs::0","time":{"start":1754490292554,"stop":1754490292555,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.unit.utils"},{"name":"suite","value":"test_cache"},{"name":"host","value":"pkrvmjbmru5nbw0"},{"name":"thread","value":"2423-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.unit.utils.test_cache"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"ee324f19fa0a98ec.json","parameterValues":[]}
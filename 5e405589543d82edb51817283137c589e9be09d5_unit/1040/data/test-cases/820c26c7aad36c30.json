{
  "uid" : "820c26c7aad36c30",
  "name" : "test_create_binding_existing_db",
  "fullName" : "tests.unit.service.V1.test_bindings#test_create_binding_existing_db",
  "historyId" : "85f2e4fd12066d9803b758b79d05b6c6",
  "time" : {
    "start" : 1705916191852,
    "stop" : 1705916191912,
    "duration" : 60
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: Expected class DatabaseService(BaseService):\n    def get(self, id_: str) -> Database:\n        \"\"\"Get a Database from Firebolt by its ID.\"\"\"\n\n        response = self.client.get(\n            url=ACCOUNT_DATABASE_URL.format(account_id=self.account_id, database_id=id_)\n        )\n        return Database.parse_obj_with_service(\n            obj=response.json()[\"database\"], database_service=self\n        )\n\n    def get_by_name(self, name: str) -> Database:\n        \"\"\"Get a database from Firebolt by its name.\"\"\"\n\n        database_id = self.get_id_by_name(name=name)\n        return self.get(id_=database_id)\n\n    def get_id_by_name(self, name: str) -> str:\n        \"\"\"Get a database ID from Firebolt by its name.\"\"\"\n\n        response = self.client.get(\n            url=ACCOUNT_DATABASE_BY_NAME_URL.format(account_id=self.account_id),\n            params={\"database_name\": name},\n        )\n        database_id = response.json()[\"database_id\"][\"database_id\"]\n        return database_id\n\n    def get_many(\n        self,\n        name_contains: Optional[str] = None,\n        attached_engine_name_eq: Optional[str] = None,\n        attached_engine_name_contains: Optional[str] = None,\n        order_by: Optional[Union[str, DatabaseOrder]] = None,\n    ) -> List[Database]:\n        \"\"\"\n        Get a list of databases on Firebolt.\n\n        Args:\n            name_contains: Filter for databases with a name containing this substring\n            attached_engine_name_eq: Filter for databases by an exact engine name\n            attached_engine_name_contains: Filter for databases by engines with a\n                name containing this substring\n            order_by: Method by which to order the results.\n                See :py:class:`firebolt.service.types.DatabaseOrder`\n\n        Returns:\n            A list of databases matching the filters\n        \"\"\"\n\n        if isinstance(order_by, str):\n            order_by = DatabaseOrder[order_by].name\n\n        params = {\n            \"page.first\": \"1000\",\n            \"order_by\": order_by,\n            \"filter.name_contains\": name_contains,\n            \"filter.attached_engine_name_eq\": attached_engine_name_eq,\n            \"filter.attached_engine_name_contains\": attached_engine_name_contains,\n        }\n\n        response = self.client.get(\n            url=ACCOUNT_DATABASES_URL.format(account_id=self.account_id),\n            params=prune_dict(params),\n        )\n\n        return [\n            Database.parse_obj_with_service(obj=d[\"node\"], database_service=self)\n            for d in response.json()[\"edges\"]\n        ]\n\n    def create(\n        self, name: str, region: Optional[str] = None, description: Optional[str] = None\n    ) -> Database:\n        \"\"\"\n        Create a new Database on Firebolt.\n\n        Args:\n            name: Name of the database\n            region: Region name in which to create the database\n\n        Returns:\n            The newly created database\n        \"\"\"\n\n        class _DatabaseCreateRequest(FireboltBaseModel):\n            \"\"\"Helper model for sending database creation requests.\"\"\"\n\n            account_id: str\n            database: Database\n\n        if region is None:\n            region_key = self.resource_manager.regions.default_region.key\n        else:\n            region_key = self.resource_manager.regions.get_by_name(name=region).key\n        database = Database(\n            name=name, compute_region_key=region_key, description=description\n        )\n\n        logger.info(f\"Creating Database (name={name})\")\n        response = self.client.post(\n            url=ACCOUNT_DATABASES_URL.format(account_id=self.account_id),\n            headers={\"Content-type\": \"application/json\"},\n            json=_DatabaseCreateRequest(\n                account_id=self.account_id,\n                database=database,\n            ).jsonable_dict(by_alias=True),\n        )\n        return Database.parse_obj_with_service(\n            obj=response.json()[\"database\"], database_service=self\n        )\n, got class DatabaseService(BaseService):\n    def get(self, id_: str) -> Database:\n        \"\"\"Get a Database from Firebolt by its ID.\"\"\"\n\n        response = self.client.get(\n            url=ACCOUNT_DATABASE_URL.format(account_id=self.account_id, database_id=id_)\n        )\n        return Database.parse_obj_with_service(\n            obj=response.json()[\"database\"], database_service=self\n        )\n\n    def get_by_name(self, name: str) -> Database:\n        \"\"\"Get a database from Firebolt by its name.\"\"\"\n\n        database_id = self.get_id_by_name(name=name)\n        return self.get(id_=database_id)\n\n    def get_id_by_name(self, name: str) -> str:\n        \"\"\"Get a database ID from Firebolt by its name.\"\"\"\n\n        response = self.client.get(\n            url=ACCOUNT_DATABASE_BY_NAME_URL.format(account_id=self.account_id),\n            params={\"database_name\": name},\n        )\n        database_id = response.json()[\"database_id\"][\"database_id\"]\n        return database_id\n\n    def get_many(\n        self,\n        name_contains: Optional[str] = None,\n        attached_engine_name_eq: Optional[str] = None,\n        attached_engine_name_contains: Optional[str] = None,\n        order_by: Optional[Union[str, DatabaseOrder]] = None,\n    ) -> List[Database]:\n        \"\"\"\n        Get a list of databases on Firebolt.\n\n        Args:\n            name_contains: Filter for databases with a name containing this substring\n            attached_engine_name_eq: Filter for databases by an exact engine name\n            attached_engine_name_contains: Filter for databases by engines with a\n                name containing this substring\n            order_by: Method by which to order the results.\n                See :py:class:`firebolt.service.types.DatabaseOrder`\n\n        Returns:\n            A list of databases matching the filters\n        \"\"\"\n\n        if isinstance(order_by, str):\n            order_by = DatabaseOrder[order_by].name\n\n        params = {\n            \"page.first\": \"1000\",\n            \"order_by\": order_by,\n            \"filter.name_contains\": name_contains,\n            \"filter.attached_engine_name_eq\": attached_engine_name_eq,\n            \"filter.attached_engine_name_contains\": attached_engine_name_contains,\n        }\n\n        response = self.client.get(\n            url=ACCOUNT_DATABASES_URL.format(account_id=self.account_id),\n            params=prune_dict(params),\n        )\n\n        return [\n            Database.parse_obj_with_service(obj=d[\"node\"], database_service=self)\n            for d in response.json()[\"edges\"]\n        ]\n\n    def create(\n        self, name: str, region: Optional[str] = None, description: Optional[str] = None\n    ) -> Database:\n        \"\"\"\n        Create a new Database on Firebolt.\n\n        Args:\n            name: Name of the database\n            region: Region name in which to create the database\n\n        Returns:\n            The newly created database\n        \"\"\"\n\n        class _DatabaseCreateRequest(FireboltBaseModel):\n            \"\"\"Helper model for sending database creation requests.\"\"\"\n\n            account_id: str\n            database: Database\n\n        if region is None:\n            region_key = self.resource_manager.regions.default_region.key\n        else:\n            region_key = self.resource_manager.regions.get_by_name(name=region).key\n        database = Database(\n            name=name, compute_region_key=region_key, description=description\n        )\n\n        logger.info(f\"Creating Database (name={name})\")\n        response = self.client.post(\n            url=ACCOUNT_DATABASES_URL.format(account_id=self.account_id),\n            headers={\"Content-type\": \"application/json\"},\n            json=_DatabaseCreateRequest(\n                account_id=self.account_id,\n                database=database,\n            ).jsonable_dict(by_alias=True),\n        )\n        return Database.parse_obj_with_service(\n            obj=response.json()[\"database\"], database_service=self\n        )\n(False), (False)",
  "statusTrace" : "httpx_mock = <pytest_httpx._httpx_mock.HTTPXMock object at 0x7fa4eda7dad0>\nauth_callback = <function auth_callback.<locals>.do_mock at 0x7fa4eb8f5dd0>\nauth_url = 'https://api-dev.mock.firebolt.io/auth/v1/login'\nprovider_callback = <function provider_callback.<locals>.do_mock at 0x7fa4ebb18440>\nprovider_url = 'https://api-dev.mock.firebolt.io/compute/v1/providers'\naccount_id_callback = <function account_id_callback.<locals>.do_mock at 0x7fa4eb83dcb0>\naccount_id_url = re.compile('(?:https:\\\\/\\\\/api-dev.mock.firebolt.io\\\\/web\\\\/v3\\\\/account\\\\/{account_name}\\\\/resolve\\\\?account_name=.*|https:\\\\/\\\\/api-dev.mock.firebolt.io\\\\/iam\\\\/v2\\\\/account)')\nbindings_url = 'https://api-dev.mock.firebolt.io/core/v1/accounts/mock_account_id/bindings?page.first=5000&filter.id_engine_id_eq=mock_engine_id_1'\nbindings_callback = <function bindings_callback.<locals>.do_mock at 0x7fa4eb583290>\ndatabase_url = 'https://api-dev.mock.firebolt.io/core/v1/accounts/mock_account_id/databases/database_id'\ndatabase_callback = <function database_callback.<locals>.do_mock at 0x7fa4eda838c0>\nsettings = Settings(auth=<firebolt.client.auth.username_password.UsernamePassword object at 0x7fa4eda835f0>, account_name='mock_account_name', server='api-dev.mock.firebolt.io', default_region='mock_region_1')\nmock_engine = Engine(name='my_engine', compute_region_key=RegionKey(provider_id='pid', region_id='rid'), settings=EngineSettings(pre...ast_update_actor=None, last_use_time=None, desired_status=None, health_status=None, endpoint_desired_revision_key=None)\nmock_database = Database(name='mock_db_name', compute_region_key=RegionKey(provider_id='mock_provider_id', region_id='mock_region_id_1...ket_name=None, create_time=None, create_actor=None, last_update_time=None, last_update_actor=None, desired_status=None)\n\n    def test_create_binding_existing_db(\n        httpx_mock: HTTPXMock,\n        auth_callback: Callable,\n        auth_url: str,\n        provider_callback: Callable,\n        provider_url: str,\n        account_id_callback: Callable,\n        account_id_url: Pattern,\n        bindings_url: str,\n        bindings_callback: Callable,\n        database_url: str,\n        database_callback: Callable,\n        settings: Settings,\n        mock_engine: Engine,\n        mock_database: Database,\n    ):\n        httpx_mock.add_callback(auth_callback, url=auth_url)\n        httpx_mock.add_callback(provider_callback, url=provider_url)\n        httpx_mock.add_callback(account_id_callback, url=account_id_url)\n        httpx_mock.add_callback(bindings_callback, url=bindings_url)\n        httpx_mock.add_callback(database_callback, url=database_url)\n    \n        resource_manager = ResourceManager(settings=settings)\n        with raises(AlreadyBoundError):\n            resource_manager.bindings.create(\n>               engine=mock_engine, database=mock_database, is_default_engine=True\n            )\n\n/home/runner/work/firebolt-python-sdk/firebolt-python-sdk/tests/unit/service/V1/test_bindings.py:95: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/home/runner/work/firebolt-python-sdk/firebolt-python-sdk/src/firebolt/service/V1/binding.py:121: in create\n    existing_database = self.get_database_bound_to_engine(engine=engine)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <firebolt.service.V1.binding.BindingService object at 0x7fa4edae28d0>\nengine = Engine(name='my_engine', compute_region_key=RegionKey(provider_id='pid', region_id='rid'), settings=EngineSettings(pre...ast_update_actor=None, last_use_time=None, desired_status=None, health_status=None, endpoint_desired_revision_key=None)\n\n    def get_database_bound_to_engine(self, engine: Engine) -> Optional[Database]:\n        \"\"\"Get the database to which an engine is bound, if any.\"\"\"\n        try:\n            binding = self.get_many(engine_id=engine.engine_id)[0]\n        except IndexError:\n            return None\n        try:\n            import inspect\n    \n            assert isinstance(self.resource_manager.databases, DatabaseService), (\n>               f\"Expected {inspect.getsource(DatabaseService)}, \"\n                f\"got {inspect.getsource(type(self.resource_manager.databases))}\"\n                f\"({DatabaseService == type(self.resource_manager.databases)}), \"\n                f\"({isinstance(self.resource_manager.databases, DatabaseService)})\"\n            )\nE           AssertionError: Expected class DatabaseService(BaseService):\nE               def get(self, id_: str) -> Database:\nE                   \"\"\"Get a Database from Firebolt by its ID.\"\"\"\nE           \nE                   response = self.client.get(\nE                       url=ACCOUNT_DATABASE_URL.format(account_id=self.account_id, database_id=id_)\nE                   )\nE                   return Database.parse_obj_with_service(\nE                       obj=response.json()[\"database\"], database_service=self\nE                   )\nE           \nE               def get_by_name(self, name: str) -> Database:\nE                   \"\"\"Get a database from Firebolt by its name.\"\"\"\nE           \nE                   database_id = self.get_id_by_name(name=name)\nE                   return self.get(id_=database_id)\nE           \nE               def get_id_by_name(self, name: str) -> str:\nE                   \"\"\"Get a database ID from Firebolt by its name.\"\"\"\nE           \nE                   response = self.client.get(\nE                       url=ACCOUNT_DATABASE_BY_NAME_URL.format(account_id=self.account_id),\nE                       params={\"database_name\": name},\nE                   )\nE                   database_id = response.json()[\"database_id\"][\"database_id\"]\nE                   return database_id\nE           \nE               def get_many(\nE                   self,\nE                   name_contains: Optional[str] = None,\nE                   attached_engine_name_eq: Optional[str] = None,\nE                   attached_engine_name_contains: Optional[str] = None,\nE                   order_by: Optional[Union[str, DatabaseOrder]] = None,\nE               ) -> List[Database]:\nE                   \"\"\"\nE                   Get a list of databases on Firebolt.\nE           \nE                   Args:\nE                       name_contains: Filter for databases with a name containing this substring\nE                       attached_engine_name_eq: Filter for databases by an exact engine name\nE                       attached_engine_name_contains: Filter for databases by engines with a\nE                           name containing this substring\nE                       order_by: Method by which to order the results.\nE                           See :py:class:`firebolt.service.types.DatabaseOrder`\nE           \nE                   Returns:\nE                       A list of databases matching the filters\nE                   \"\"\"\nE           \nE                   if isinstance(order_by, str):\nE                       order_by = DatabaseOrder[order_by].name\nE           \nE                   params = {\nE                       \"page.first\": \"1000\",\nE                       \"order_by\": order_by,\nE                       \"filter.name_contains\": name_contains,\nE                       \"filter.attached_engine_name_eq\": attached_engine_name_eq,\nE                       \"filter.attached_engine_name_contains\": attached_engine_name_contains,\nE                   }\nE           \nE                   response = self.client.get(\nE                       url=ACCOUNT_DATABASES_URL.format(account_id=self.account_id),\nE                       params=prune_dict(params),\nE                   )\nE           \nE                   return [\nE                       Database.parse_obj_with_service(obj=d[\"node\"], database_service=self)\nE                       for d in response.json()[\"edges\"]\nE                   ]\nE           \nE               def create(\nE                   self, name: str, region: Optional[str] = None, description: Optional[str] = None\nE               ) -> Database:\nE                   \"\"\"\nE                   Create a new Database on Firebolt.\nE           \nE                   Args:\nE                       name: Name of the database\nE                       region: Region name in which to create the database\nE           \nE                   Returns:\nE                       The newly created database\nE                   \"\"\"\nE           \nE                   class _DatabaseCreateRequest(FireboltBaseModel):\nE                       \"\"\"Helper model for sending database creation requests.\"\"\"\nE           \nE                       account_id: str\nE                       database: Database\nE           \nE                   if region is None:\nE                       region_key = self.resource_manager.regions.default_region.key\nE                   else:\nE                       region_key = self.resource_manager.regions.get_by_name(name=region).key\nE                   database = Database(\nE                       name=name, compute_region_key=region_key, description=description\nE                   )\nE           \nE                   logger.info(f\"Creating Database (name={name})\")\nE                   response = self.client.post(\nE                       url=ACCOUNT_DATABASES_URL.format(account_id=self.account_id),\nE                       headers={\"Content-type\": \"application/json\"},\nE                       json=_DatabaseCreateRequest(\nE                           account_id=self.account_id,\nE                           database=database,\nE                       ).jsonable_dict(by_alias=True),\nE                   )\nE                   return Database.parse_obj_with_service(\nE                       obj=response.json()[\"database\"], database_service=self\nE                   )\nE           , got class DatabaseService(BaseService):\nE               def get(self, id_: str) -> Database:\nE                   \"\"\"Get a Database from Firebolt by its ID.\"\"\"\nE           \nE                   response = self.client.get(\nE                       url=ACCOUNT_DATABASE_URL.format(account_id=self.account_id, database_id=id_)\nE                   )\nE                   return Database.parse_obj_with_service(\nE                       obj=response.json()[\"database\"], database_service=self\nE                   )\nE           \nE               def get_by_name(self, name: str) -> Database:\nE                   \"\"\"Get a database from Firebolt by its name.\"\"\"\nE           \nE                   database_id = self.get_id_by_name(name=name)\nE                   return self.get(id_=database_id)\nE           \nE               def get_id_by_name(self, name: str) -> str:\nE                   \"\"\"Get a database ID from Firebolt by its name.\"\"\"\nE           \nE                   response = self.client.get(\nE                       url=ACCOUNT_DATABASE_BY_NAME_URL.format(account_id=self.account_id),\nE                       params={\"database_name\": name},\nE                   )\nE                   database_id = response.json()[\"database_id\"][\"database_id\"]\nE                   return database_id\nE           \nE               def get_many(\nE                   self,\nE                   name_contains: Optional[str] = None,\nE                   attached_engine_name_eq: Optional[str] = None,\nE                   attached_engine_name_contains: Optional[str] = None,\nE                   order_by: Optional[Union[str, DatabaseOrder]] = None,\nE               ) -> List[Database]:\nE                   \"\"\"\nE                   Get a list of databases on Firebolt.\nE           \nE                   Args:\nE                       name_contains: Filter for databases with a name containing this substring\nE                       attached_engine_name_eq: Filter for databases by an exact engine name\nE                       attached_engine_name_contains: Filter for databases by engines with a\nE                           name containing this substring\nE                       order_by: Method by which to order the results.\nE                           See :py:class:`firebolt.service.types.DatabaseOrder`\nE           \nE                   Returns:\nE                       A list of databases matching the filters\nE                   \"\"\"\nE           \nE                   if isinstance(order_by, str):\nE                       order_by = DatabaseOrder[order_by].name\nE           \nE                   params = {\nE                       \"page.first\": \"1000\",\nE                       \"order_by\": order_by,\nE                       \"filter.name_contains\": name_contains,\nE                       \"filter.attached_engine_name_eq\": attached_engine_name_eq,\nE                       \"filter.attached_engine_name_contains\": attached_engine_name_contains,\nE                   }\nE           \nE                   response = self.client.get(\nE                       url=ACCOUNT_DATABASES_URL.format(account_id=self.account_id),\nE                       params=prune_dict(params),\nE                   )\nE           \nE                   return [\nE                       Database.parse_obj_with_service(obj=d[\"node\"], database_service=self)\nE                       for d in response.json()[\"edges\"]\nE                   ]\nE           \nE               def create(\nE                   self, name: str, region: Optional[str] = None, description: Optional[str] = None\nE               ) -> Database:\nE                   \"\"\"\nE                   Create a new Database on Firebolt.\nE           \nE                   Args:\nE                       name: Name of the database\nE                       region: Region name in which to create the database\nE           \nE                   Returns:\nE                       The newly created database\nE                   \"\"\"\nE           \nE                   class _DatabaseCreateRequest(FireboltBaseModel):\nE                       \"\"\"Helper model for sending database creation requests.\"\"\"\nE           \nE                       account_id: str\nE                       database: Database\nE           \nE                   if region is None:\nE                       region_key = self.resource_manager.regions.default_region.key\nE                   else:\nE                       region_key = self.resource_manager.regions.get_by_name(name=region).key\nE                   database = Database(\nE                       name=name, compute_region_key=region_key, description=description\nE                   )\nE           \nE                   logger.info(f\"Creating Database (name={name})\")\nE                   response = self.client.post(\nE                       url=ACCOUNT_DATABASES_URL.format(account_id=self.account_id),\nE                       headers={\"Content-type\": \"application/json\"},\nE                       json=_DatabaseCreateRequest(\nE                           account_id=self.account_id,\nE                           database=database,\nE                       ).jsonable_dict(by_alias=True),\nE                   )\nE                   return Database.parse_obj_with_service(\nE                       obj=response.json()[\"database\"], database_service=self\nE                   )\nE           (False), (False)\n\n/home/runner/work/firebolt-python-sdk/firebolt-python-sdk/src/firebolt/service/V1/binding.py:81: AssertionError",
  "flaky" : false,
  "newFailed" : true,
  "beforeStages" : [ {
    "name" : "password",
    "time" : {
      "start" : 1705916191826,
      "stop" : 1705916191827,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "bindings_url",
    "time" : {
      "start" : 1705916191825,
      "stop" : 1705916191825,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "account_id_callback",
    "time" : {
      "start" : 1705916191824,
      "stop" : 1705916191824,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "settings",
    "time" : {
      "start" : 1705916191851,
      "stop" : 1705916191851,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "account_id_callback",
    "time" : {
      "start" : 1705916193205,
      "stop" : 1705916193205,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "account_id",
    "time" : {
      "start" : 1705916191824,
      "stop" : 1705916191824,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "provider_url",
    "time" : {
      "start" : 1705916191823,
      "stop" : 1705916191823,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "auth_callback",
    "time" : {
      "start" : 1705916191823,
      "stop" : 1705916191823,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "non_mocked_hosts",
    "time" : {
      "start" : 1705916191822,
      "stop" : 1705916191822,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "account_name",
    "time" : {
      "start" : 1705916191824,
      "stop" : 1705916191824,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "mock_engine",
    "time" : {
      "start" : 1705916191825,
      "stop" : 1705916191825,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "region_string",
    "time" : {
      "start" : 1705916191826,
      "stop" : 1705916191826,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "mock_database",
    "time" : {
      "start" : 1705916191826,
      "stop" : 1705916191826,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "database_id",
    "time" : {
      "start" : 1705916191825,
      "stop" : 1705916191825,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "auth_url",
    "time" : {
      "start" : 1705916191822,
      "stop" : 1705916191822,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "provider",
    "time" : {
      "start" : 1705916191823,
      "stop" : 1705916191823,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "database_url",
    "time" : {
      "start" : 1705916191825,
      "stop" : 1705916191826,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "httpx_mock",
    "time" : {
      "start" : 1705916191822,
      "stop" : 1705916191822,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "global_fake_fs",
    "time" : {
      "start" : 1705916191819,
      "stop" : 1705916191821,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "mock_providers",
    "time" : {
      "start" : 1705916191823,
      "stop" : 1705916191823,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "user",
    "time" : {
      "start" : 1705916191826,
      "stop" : 1705916191826,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "region_1",
    "time" : {
      "start" : 1705916191826,
      "stop" : 1705916191826,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "provider_callback",
    "time" : {
      "start" : 1705916191823,
      "stop" : 1705916191823,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "engine_name",
    "time" : {
      "start" : 1705916191824,
      "stop" : 1705916191824,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "engine_settings",
    "time" : {
      "start" : 1705916191825,
      "stop" : 1705916191825,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "database_callback",
    "time" : {
      "start" : 1705916191826,
      "stop" : 1705916191826,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "assert_all_responses_were_requested",
    "time" : {
      "start" : 1705916191822,
      "stop" : 1705916191822,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "region_key",
    "time" : {
      "start" : 1705916191824,
      "stop" : 1705916191824,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "account_id_url",
    "time" : {
      "start" : 1705916191824,
      "stop" : 1705916191824,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "bindings_callback",
    "time" : {
      "start" : 1705916191825,
      "stop" : 1705916191825,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "username_password_auth",
    "time" : {
      "start" : 1705916191827,
      "stop" : 1705916191851,
      "duration" : 24
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "account_id_url",
    "time" : {
      "start" : 1705916193205,
      "stop" : 1705916193205,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "binding",
    "time" : {
      "start" : 1705916191825,
      "stop" : 1705916191825,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "server",
    "time" : {
      "start" : 1705916191822,
      "stop" : 1705916191822,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "auth_url",
    "time" : {
      "start" : 1705916193204,
      "stop" : 1705916193204,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "monkeypatch",
    "time" : {
      "start" : 1705916191822,
      "stop" : 1705916191822,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: Expected class DatabaseService(BaseService):\n    def get(self, id_: str) -> Database:\n        \"\"\"Get a Database from Firebolt by its ID.\"\"\"\n\n        response = self.client.get(\n            url=ACCOUNT_DATABASE_URL.format(account_id=self.account_id, database_id=id_)\n        )\n        return Database.parse_obj_with_service(\n            obj=response.json()[\"database\"], database_service=self\n        )\n\n    def get_by_name(self, name: str) -> Database:\n        \"\"\"Get a database from Firebolt by its name.\"\"\"\n\n        database_id = self.get_id_by_name(name=name)\n        return self.get(id_=database_id)\n\n    def get_id_by_name(self, name: str) -> str:\n        \"\"\"Get a database ID from Firebolt by its name.\"\"\"\n\n        response = self.client.get(\n            url=ACCOUNT_DATABASE_BY_NAME_URL.format(account_id=self.account_id),\n            params={\"database_name\": name},\n        )\n        database_id = response.json()[\"database_id\"][\"database_id\"]\n        return database_id\n\n    def get_many(\n        self,\n        name_contains: Optional[str] = None,\n        attached_engine_name_eq: Optional[str] = None,\n        attached_engine_name_contains: Optional[str] = None,\n        order_by: Optional[Union[str, DatabaseOrder]] = None,\n    ) -> List[Database]:\n        \"\"\"\n        Get a list of databases on Firebolt.\n\n        Args:\n            name_contains: Filter for databases with a name containing this substring\n            attached_engine_name_eq: Filter for databases by an exact engine name\n            attached_engine_name_contains: Filter for databases by engines with a\n                name containing this substring\n            order_by: Method by which to order the results.\n                See :py:class:`firebolt.service.types.DatabaseOrder`\n\n        Returns:\n            A list of databases matching the filters\n        \"\"\"\n\n        if isinstance(order_by, str):\n            order_by = DatabaseOrder[order_by].name\n\n        params = {\n            \"page.first\": \"1000\",\n            \"order_by\": order_by,\n            \"filter.name_contains\": name_contains,\n            \"filter.attached_engine_name_eq\": attached_engine_name_eq,\n            \"filter.attached_engine_name_contains\": attached_engine_name_contains,\n        }\n\n        response = self.client.get(\n            url=ACCOUNT_DATABASES_URL.format(account_id=self.account_id),\n            params=prune_dict(params),\n        )\n\n        return [\n            Database.parse_obj_with_service(obj=d[\"node\"], database_service=self)\n            for d in response.json()[\"edges\"]\n        ]\n\n    def create(\n        self, name: str, region: Optional[str] = None, description: Optional[str] = None\n    ) -> Database:\n        \"\"\"\n        Create a new Database on Firebolt.\n\n        Args:\n            name: Name of the database\n            region: Region name in which to create the database\n\n        Returns:\n            The newly created database\n        \"\"\"\n\n        class _DatabaseCreateRequest(FireboltBaseModel):\n            \"\"\"Helper model for sending database creation requests.\"\"\"\n\n            account_id: str\n            database: Database\n\n        if region is None:\n            region_key = self.resource_manager.regions.default_region.key\n        else:\n            region_key = self.resource_manager.regions.get_by_name(name=region).key\n        database = Database(\n            name=name, compute_region_key=region_key, description=description\n        )\n\n        logger.info(f\"Creating Database (name={name})\")\n        response = self.client.post(\n            url=ACCOUNT_DATABASES_URL.format(account_id=self.account_id),\n            headers={\"Content-type\": \"application/json\"},\n            json=_DatabaseCreateRequest(\n                account_id=self.account_id,\n                database=database,\n            ).jsonable_dict(by_alias=True),\n        )\n        return Database.parse_obj_with_service(\n            obj=response.json()[\"database\"], database_service=self\n        )\n, got class DatabaseService(BaseService):\n    def get(self, id_: str) -> Database:\n        \"\"\"Get a Database from Firebolt by its ID.\"\"\"\n\n        response = self.client.get(\n            url=ACCOUNT_DATABASE_URL.format(account_id=self.account_id, database_id=id_)\n        )\n        return Database.parse_obj_with_service(\n            obj=response.json()[\"database\"], database_service=self\n        )\n\n    def get_by_name(self, name: str) -> Database:\n        \"\"\"Get a database from Firebolt by its name.\"\"\"\n\n        database_id = self.get_id_by_name(name=name)\n        return self.get(id_=database_id)\n\n    def get_id_by_name(self, name: str) -> str:\n        \"\"\"Get a database ID from Firebolt by its name.\"\"\"\n\n        response = self.client.get(\n            url=ACCOUNT_DATABASE_BY_NAME_URL.format(account_id=self.account_id),\n            params={\"database_name\": name},\n        )\n        database_id = response.json()[\"database_id\"][\"database_id\"]\n        return database_id\n\n    def get_many(\n        self,\n        name_contains: Optional[str] = None,\n        attached_engine_name_eq: Optional[str] = None,\n        attached_engine_name_contains: Optional[str] = None,\n        order_by: Optional[Union[str, DatabaseOrder]] = None,\n    ) -> List[Database]:\n        \"\"\"\n        Get a list of databases on Firebolt.\n\n        Args:\n            name_contains: Filter for databases with a name containing this substring\n            attached_engine_name_eq: Filter for databases by an exact engine name\n            attached_engine_name_contains: Filter for databases by engines with a\n                name containing this substring\n            order_by: Method by which to order the results.\n                See :py:class:`firebolt.service.types.DatabaseOrder`\n\n        Returns:\n            A list of databases matching the filters\n        \"\"\"\n\n        if isinstance(order_by, str):\n            order_by = DatabaseOrder[order_by].name\n\n        params = {\n            \"page.first\": \"1000\",\n            \"order_by\": order_by,\n            \"filter.name_contains\": name_contains,\n            \"filter.attached_engine_name_eq\": attached_engine_name_eq,\n            \"filter.attached_engine_name_contains\": attached_engine_name_contains,\n        }\n\n        response = self.client.get(\n            url=ACCOUNT_DATABASES_URL.format(account_id=self.account_id),\n            params=prune_dict(params),\n        )\n\n        return [\n            Database.parse_obj_with_service(obj=d[\"node\"], database_service=self)\n            for d in response.json()[\"edges\"]\n        ]\n\n    def create(\n        self, name: str, region: Optional[str] = None, description: Optional[str] = None\n    ) -> Database:\n        \"\"\"\n        Create a new Database on Firebolt.\n\n        Args:\n            name: Name of the database\n            region: Region name in which to create the database\n\n        Returns:\n            The newly created database\n        \"\"\"\n\n        class _DatabaseCreateRequest(FireboltBaseModel):\n            \"\"\"Helper model for sending database creation requests.\"\"\"\n\n            account_id: str\n            database: Database\n\n        if region is None:\n            region_key = self.resource_manager.regions.default_region.key\n        else:\n            region_key = self.resource_manager.regions.get_by_name(name=region).key\n        database = Database(\n            name=name, compute_region_key=region_key, description=description\n        )\n\n        logger.info(f\"Creating Database (name={name})\")\n        response = self.client.post(\n            url=ACCOUNT_DATABASES_URL.format(account_id=self.account_id),\n            headers={\"Content-type\": \"application/json\"},\n            json=_DatabaseCreateRequest(\n                account_id=self.account_id,\n                database=database,\n            ).jsonable_dict(by_alias=True),\n        )\n        return Database.parse_obj_with_service(\n            obj=response.json()[\"database\"], database_service=self\n        )\n(False), (False)",
    "statusTrace" : "httpx_mock = <pytest_httpx._httpx_mock.HTTPXMock object at 0x7fa4eda7dad0>\nauth_callback = <function auth_callback.<locals>.do_mock at 0x7fa4eb8f5dd0>\nauth_url = 'https://api-dev.mock.firebolt.io/auth/v1/login'\nprovider_callback = <function provider_callback.<locals>.do_mock at 0x7fa4ebb18440>\nprovider_url = 'https://api-dev.mock.firebolt.io/compute/v1/providers'\naccount_id_callback = <function account_id_callback.<locals>.do_mock at 0x7fa4eb83dcb0>\naccount_id_url = re.compile('(?:https:\\\\/\\\\/api-dev.mock.firebolt.io\\\\/web\\\\/v3\\\\/account\\\\/{account_name}\\\\/resolve\\\\?account_name=.*|https:\\\\/\\\\/api-dev.mock.firebolt.io\\\\/iam\\\\/v2\\\\/account)')\nbindings_url = 'https://api-dev.mock.firebolt.io/core/v1/accounts/mock_account_id/bindings?page.first=5000&filter.id_engine_id_eq=mock_engine_id_1'\nbindings_callback = <function bindings_callback.<locals>.do_mock at 0x7fa4eb583290>\ndatabase_url = 'https://api-dev.mock.firebolt.io/core/v1/accounts/mock_account_id/databases/database_id'\ndatabase_callback = <function database_callback.<locals>.do_mock at 0x7fa4eda838c0>\nsettings = Settings(auth=<firebolt.client.auth.username_password.UsernamePassword object at 0x7fa4eda835f0>, account_name='mock_account_name', server='api-dev.mock.firebolt.io', default_region='mock_region_1')\nmock_engine = Engine(name='my_engine', compute_region_key=RegionKey(provider_id='pid', region_id='rid'), settings=EngineSettings(pre...ast_update_actor=None, last_use_time=None, desired_status=None, health_status=None, endpoint_desired_revision_key=None)\nmock_database = Database(name='mock_db_name', compute_region_key=RegionKey(provider_id='mock_provider_id', region_id='mock_region_id_1...ket_name=None, create_time=None, create_actor=None, last_update_time=None, last_update_actor=None, desired_status=None)\n\n    def test_create_binding_existing_db(\n        httpx_mock: HTTPXMock,\n        auth_callback: Callable,\n        auth_url: str,\n        provider_callback: Callable,\n        provider_url: str,\n        account_id_callback: Callable,\n        account_id_url: Pattern,\n        bindings_url: str,\n        bindings_callback: Callable,\n        database_url: str,\n        database_callback: Callable,\n        settings: Settings,\n        mock_engine: Engine,\n        mock_database: Database,\n    ):\n        httpx_mock.add_callback(auth_callback, url=auth_url)\n        httpx_mock.add_callback(provider_callback, url=provider_url)\n        httpx_mock.add_callback(account_id_callback, url=account_id_url)\n        httpx_mock.add_callback(bindings_callback, url=bindings_url)\n        httpx_mock.add_callback(database_callback, url=database_url)\n    \n        resource_manager = ResourceManager(settings=settings)\n        with raises(AlreadyBoundError):\n            resource_manager.bindings.create(\n>               engine=mock_engine, database=mock_database, is_default_engine=True\n            )\n\n/home/runner/work/firebolt-python-sdk/firebolt-python-sdk/tests/unit/service/V1/test_bindings.py:95: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/home/runner/work/firebolt-python-sdk/firebolt-python-sdk/src/firebolt/service/V1/binding.py:121: in create\n    existing_database = self.get_database_bound_to_engine(engine=engine)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <firebolt.service.V1.binding.BindingService object at 0x7fa4edae28d0>\nengine = Engine(name='my_engine', compute_region_key=RegionKey(provider_id='pid', region_id='rid'), settings=EngineSettings(pre...ast_update_actor=None, last_use_time=None, desired_status=None, health_status=None, endpoint_desired_revision_key=None)\n\n    def get_database_bound_to_engine(self, engine: Engine) -> Optional[Database]:\n        \"\"\"Get the database to which an engine is bound, if any.\"\"\"\n        try:\n            binding = self.get_many(engine_id=engine.engine_id)[0]\n        except IndexError:\n            return None\n        try:\n            import inspect\n    \n            assert isinstance(self.resource_manager.databases, DatabaseService), (\n>               f\"Expected {inspect.getsource(DatabaseService)}, \"\n                f\"got {inspect.getsource(type(self.resource_manager.databases))}\"\n                f\"({DatabaseService == type(self.resource_manager.databases)}), \"\n                f\"({isinstance(self.resource_manager.databases, DatabaseService)})\"\n            )\nE           AssertionError: Expected class DatabaseService(BaseService):\nE               def get(self, id_: str) -> Database:\nE                   \"\"\"Get a Database from Firebolt by its ID.\"\"\"\nE           \nE                   response = self.client.get(\nE                       url=ACCOUNT_DATABASE_URL.format(account_id=self.account_id, database_id=id_)\nE                   )\nE                   return Database.parse_obj_with_service(\nE                       obj=response.json()[\"database\"], database_service=self\nE                   )\nE           \nE               def get_by_name(self, name: str) -> Database:\nE                   \"\"\"Get a database from Firebolt by its name.\"\"\"\nE           \nE                   database_id = self.get_id_by_name(name=name)\nE                   return self.get(id_=database_id)\nE           \nE               def get_id_by_name(self, name: str) -> str:\nE                   \"\"\"Get a database ID from Firebolt by its name.\"\"\"\nE           \nE                   response = self.client.get(\nE                       url=ACCOUNT_DATABASE_BY_NAME_URL.format(account_id=self.account_id),\nE                       params={\"database_name\": name},\nE                   )\nE                   database_id = response.json()[\"database_id\"][\"database_id\"]\nE                   return database_id\nE           \nE               def get_many(\nE                   self,\nE                   name_contains: Optional[str] = None,\nE                   attached_engine_name_eq: Optional[str] = None,\nE                   attached_engine_name_contains: Optional[str] = None,\nE                   order_by: Optional[Union[str, DatabaseOrder]] = None,\nE               ) -> List[Database]:\nE                   \"\"\"\nE                   Get a list of databases on Firebolt.\nE           \nE                   Args:\nE                       name_contains: Filter for databases with a name containing this substring\nE                       attached_engine_name_eq: Filter for databases by an exact engine name\nE                       attached_engine_name_contains: Filter for databases by engines with a\nE                           name containing this substring\nE                       order_by: Method by which to order the results.\nE                           See :py:class:`firebolt.service.types.DatabaseOrder`\nE           \nE                   Returns:\nE                       A list of databases matching the filters\nE                   \"\"\"\nE           \nE                   if isinstance(order_by, str):\nE                       order_by = DatabaseOrder[order_by].name\nE           \nE                   params = {\nE                       \"page.first\": \"1000\",\nE                       \"order_by\": order_by,\nE                       \"filter.name_contains\": name_contains,\nE                       \"filter.attached_engine_name_eq\": attached_engine_name_eq,\nE                       \"filter.attached_engine_name_contains\": attached_engine_name_contains,\nE                   }\nE           \nE                   response = self.client.get(\nE                       url=ACCOUNT_DATABASES_URL.format(account_id=self.account_id),\nE                       params=prune_dict(params),\nE                   )\nE           \nE                   return [\nE                       Database.parse_obj_with_service(obj=d[\"node\"], database_service=self)\nE                       for d in response.json()[\"edges\"]\nE                   ]\nE           \nE               def create(\nE                   self, name: str, region: Optional[str] = None, description: Optional[str] = None\nE               ) -> Database:\nE                   \"\"\"\nE                   Create a new Database on Firebolt.\nE           \nE                   Args:\nE                       name: Name of the database\nE                       region: Region name in which to create the database\nE           \nE                   Returns:\nE                       The newly created database\nE                   \"\"\"\nE           \nE                   class _DatabaseCreateRequest(FireboltBaseModel):\nE                       \"\"\"Helper model for sending database creation requests.\"\"\"\nE           \nE                       account_id: str\nE                       database: Database\nE           \nE                   if region is None:\nE                       region_key = self.resource_manager.regions.default_region.key\nE                   else:\nE                       region_key = self.resource_manager.regions.get_by_name(name=region).key\nE                   database = Database(\nE                       name=name, compute_region_key=region_key, description=description\nE                   )\nE           \nE                   logger.info(f\"Creating Database (name={name})\")\nE                   response = self.client.post(\nE                       url=ACCOUNT_DATABASES_URL.format(account_id=self.account_id),\nE                       headers={\"Content-type\": \"application/json\"},\nE                       json=_DatabaseCreateRequest(\nE                           account_id=self.account_id,\nE                           database=database,\nE                       ).jsonable_dict(by_alias=True),\nE                   )\nE                   return Database.parse_obj_with_service(\nE                       obj=response.json()[\"database\"], database_service=self\nE                   )\nE           , got class DatabaseService(BaseService):\nE               def get(self, id_: str) -> Database:\nE                   \"\"\"Get a Database from Firebolt by its ID.\"\"\"\nE           \nE                   response = self.client.get(\nE                       url=ACCOUNT_DATABASE_URL.format(account_id=self.account_id, database_id=id_)\nE                   )\nE                   return Database.parse_obj_with_service(\nE                       obj=response.json()[\"database\"], database_service=self\nE                   )\nE           \nE               def get_by_name(self, name: str) -> Database:\nE                   \"\"\"Get a database from Firebolt by its name.\"\"\"\nE           \nE                   database_id = self.get_id_by_name(name=name)\nE                   return self.get(id_=database_id)\nE           \nE               def get_id_by_name(self, name: str) -> str:\nE                   \"\"\"Get a database ID from Firebolt by its name.\"\"\"\nE           \nE                   response = self.client.get(\nE                       url=ACCOUNT_DATABASE_BY_NAME_URL.format(account_id=self.account_id),\nE                       params={\"database_name\": name},\nE                   )\nE                   database_id = response.json()[\"database_id\"][\"database_id\"]\nE                   return database_id\nE           \nE               def get_many(\nE                   self,\nE                   name_contains: Optional[str] = None,\nE                   attached_engine_name_eq: Optional[str] = None,\nE                   attached_engine_name_contains: Optional[str] = None,\nE                   order_by: Optional[Union[str, DatabaseOrder]] = None,\nE               ) -> List[Database]:\nE                   \"\"\"\nE                   Get a list of databases on Firebolt.\nE           \nE                   Args:\nE                       name_contains: Filter for databases with a name containing this substring\nE                       attached_engine_name_eq: Filter for databases by an exact engine name\nE                       attached_engine_name_contains: Filter for databases by engines with a\nE                           name containing this substring\nE                       order_by: Method by which to order the results.\nE                           See :py:class:`firebolt.service.types.DatabaseOrder`\nE           \nE                   Returns:\nE                       A list of databases matching the filters\nE                   \"\"\"\nE           \nE                   if isinstance(order_by, str):\nE                       order_by = DatabaseOrder[order_by].name\nE           \nE                   params = {\nE                       \"page.first\": \"1000\",\nE                       \"order_by\": order_by,\nE                       \"filter.name_contains\": name_contains,\nE                       \"filter.attached_engine_name_eq\": attached_engine_name_eq,\nE                       \"filter.attached_engine_name_contains\": attached_engine_name_contains,\nE                   }\nE           \nE                   response = self.client.get(\nE                       url=ACCOUNT_DATABASES_URL.format(account_id=self.account_id),\nE                       params=prune_dict(params),\nE                   )\nE           \nE                   return [\nE                       Database.parse_obj_with_service(obj=d[\"node\"], database_service=self)\nE                       for d in response.json()[\"edges\"]\nE                   ]\nE           \nE               def create(\nE                   self, name: str, region: Optional[str] = None, description: Optional[str] = None\nE               ) -> Database:\nE                   \"\"\"\nE                   Create a new Database on Firebolt.\nE           \nE                   Args:\nE                       name: Name of the database\nE                       region: Region name in which to create the database\nE           \nE                   Returns:\nE                       The newly created database\nE                   \"\"\"\nE           \nE                   class _DatabaseCreateRequest(FireboltBaseModel):\nE                       \"\"\"Helper model for sending database creation requests.\"\"\"\nE           \nE                       account_id: str\nE                       database: Database\nE           \nE                   if region is None:\nE                       region_key = self.resource_manager.regions.default_region.key\nE                   else:\nE                       region_key = self.resource_manager.regions.get_by_name(name=region).key\nE                   database = Database(\nE                       name=name, compute_region_key=region_key, description=description\nE                   )\nE           \nE                   logger.info(f\"Creating Database (name={name})\")\nE                   response = self.client.post(\nE                       url=ACCOUNT_DATABASES_URL.format(account_id=self.account_id),\nE                       headers={\"Content-type\": \"application/json\"},\nE                       json=_DatabaseCreateRequest(\nE                           account_id=self.account_id,\nE                           database=database,\nE                       ).jsonable_dict(by_alias=True),\nE                   )\nE                   return Database.parse_obj_with_service(\nE                       obj=response.json()[\"database\"], database_service=self\nE                   )\nE           (False), (False)\n\n/home/runner/work/firebolt-python-sdk/firebolt-python-sdk/src/firebolt/service/V1/binding.py:81: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "efc6c7cd3711d564",
      "name" : "log",
      "source" : "efc6c7cd3711d564.txt",
      "type" : "text/plain",
      "size" : 246
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "httpx_mock::0",
    "time" : {
      "start" : 1705916191937,
      "stop" : 1705916191938,
      "duration" : 1
    },
    "status" : "failed",
    "statusMessage" : "AssertionError: The following responses are mocked but not requested:\n  Match all requests on https://api-dev.mock.firebolt.io/core/v1/accounts/mock_account_id/databases/database_id\nassert not [<pytest_httpx._httpx_mock._RequestMatcher object at 0x7fa4eb45add0>]\n",
    "statusTrace" : "  File \"/opt/hostedtoolcache/Python/3.7.17/x64/lib/python3.7/site-packages/allure_commons/_allure.py\", line 221, in __call__\n    return self._fixture_function(*args, **kwargs)\n  File \"/opt/hostedtoolcache/Python/3.7.17/x64/lib/python3.7/site-packages/_pytest/fixtures.py\", line 916, in _teardown_yield_fixture\n    next(it)\n  File \"/opt/hostedtoolcache/Python/3.7.17/x64/lib/python3.7/site-packages/pytest_httpx/__init__.py\", line 65, in httpx_mock\n    mock.reset(assert_all_responses_were_requested)\n  File \"/opt/hostedtoolcache/Python/3.7.17/x64/lib/python3.7/site-packages/pytest_httpx/_httpx_mock.py\", line 309, in reset\n    assert (\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  }, {
    "name" : "global_fake_fs::0",
    "time" : {
      "start" : 1705916191940,
      "stop" : 1705916191940,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "monkeypatch::0",
    "time" : {
      "start" : 1705916191939,
      "stop" : 1705916191939,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "tests.unit.service.V1"
  }, {
    "name" : "suite",
    "value" : "test_bindings"
  }, {
    "name" : "host",
    "value" : "fv-az1432-894"
  }, {
    "name" : "thread",
    "value" : "2250-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.unit.service.V1.test_bindings"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 1,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 2,
        "unknown" : 0,
        "total" : 3
      },
      "items" : [ {
        "uid" : "73f5db1dc846175c",
        "reportUrl" : "https://firebolt-db.github.io/firebolt-python-sdk/5e405589543d82edb51817283137c589e9be09d5_unit/1040//#testresult/73f5db1dc846175c",
        "status" : "passed",
        "time" : {
          "start" : 1705915894667,
          "stop" : 1705915894713,
          "duration" : 46
        }
      }, {
        "uid" : "d195560f7796230d",
        "reportUrl" : "https://firebolt-db.github.io/firebolt-python-sdk/5e405589543d82edb51817283137c589e9be09d5_unit/1040//#testresult/d195560f7796230d",
        "status" : "passed",
        "time" : {
          "start" : 1705915651161,
          "stop" : 1705915651208,
          "duration" : 47
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "820c26c7aad36c30.json",
  "parameterValues" : [ ]
}